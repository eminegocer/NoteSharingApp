@{
    var currentUsername = User.Identity?.Name ?? "";
}

<div class="flex flex-col h-[calc(100vh-8rem)]">
    <!-- Sohbet Başlığı -->
    <div class="bg-white border-b p-4 flex items-center justify-between">
        <div class="flex items-center gap-3">
            <i class="fas fa-user-circle text-2xl text-purple-500"></i>
            <div>
                <h3 class="font-semibold text-gray-800">@ViewBag.TargetUsername</h3>
                <p class="text-xs text-gray-500">Çevrimiçi</p>
            </div>
        </div>
        <button onclick="window.parent.closeChat()" class="text-gray-500 hover:text-purple-500 transition-colors">
            <i class="fas fa-times"></i>
        </button>
    </div>

    <!-- Mesaj Alanı -->
    <div id="messageArea" class="flex-1 bg-gray-50 p-4 overflow-y-auto">
        <div id="messages" class="space-y-4">
            @if (ViewBag.ChatHistory != null)
            {
                foreach (var chat in ViewBag.ChatHistory)
                {
                    if (chat.Messages != null)
                    {
                        foreach (var message in chat.Messages)
                        {
                            var isCurrentUser = message.SenderUsername == currentUsername;
                            <div class="flex @(isCurrentUser ? "justify-end" : "justify-start") mb-4">
                                <div class="@(isCurrentUser ? "bg-purple-500 text-white" : "bg-white text-gray-800") rounded-lg p-3 max-w-[70%] shadow-sm">
                                    <p class="break-words">@message.Content</p>
                                    <span class="text-xs @(isCurrentUser ? "text-purple-100" : "text-gray-500") block mt-1">
                                        @message.CreatedAt.ToLocalTime().ToString("HH:mm")
                                    </span>
                                </div>
                            </div>
                        }
                    }
                }
            }
        </div>
    </div>

    <!-- Mesaj Yazma Alanı -->
    <div class="bg-white border-t p-4">
        <div class="flex gap-2">
            <input type="text" 
                   id="messageInput"
                   class="flex-1 border rounded-full px-4 py-2 focus:ring-2 focus:ring-purple-400 focus:border-purple-400 outline-none"
                   placeholder="Mesajınızı yazın..."
                   autocomplete="off">
            <button type="button"
                    onclick="sendMessage()"
                    class="bg-purple-500 text-white rounded-full p-2 w-10 h-10 flex items-center justify-center hover:bg-purple-600 transition-colors">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.6/signalr.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const currentUsername = '@(User.Identity?.Name ?? "")';
        const targetUsername = '@(ViewBag.TargetUsername ?? "")';
        
        if (!currentUsername || !targetUsername) {
            console.error("Kullanıcı bilgileri eksik:", { currentUsername, targetUsername });
            return;
        }
        
        const messageInput = document.getElementById("messageInput");
        const messagesDiv = document.getElementById("messages");

        // SignalR bağlantısını oluştur
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .withAutomaticReconnect()
            .configureLogging(signalR.LogLevel.Information)
            .build();

        // Enter tuşu ile mesaj gönderme
        messageInput.addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                sendMessage();
            }
        });

        // Mesaj alma olayını dinle
        connection.on("ReceiveMessage", (senderUsername, message) => {
            console.log("Message received from", senderUsername + ":", message);
            
            const messageDiv = document.createElement("div");
            const isCurrentUser = senderUsername === currentUsername;
            
            messageDiv.className = `flex ${isCurrentUser ? 'justify-end' : 'justify-start'} mb-4`;
            messageDiv.innerHTML = `
                <div class="${isCurrentUser ? 'bg-purple-500 text-white' : 'bg-white text-gray-800'} rounded-lg p-3 max-w-[70%] shadow-sm">
                    <p class="break-words">${message}</p>
                    <span class="text-xs ${isCurrentUser ? 'text-purple-100' : 'text-gray-500'} block mt-1">
                        ${new Date().toLocaleTimeString()}
                    </span>
                </div>
            `;
            
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        });

        // Mesaj gönderme fonksiyonu
        window.sendMessage = async function() {
            const message = messageInput.value.trim();
            if (!message) return;

            try {
                if (connection.state !== "Connected") {
                    await startConnection();
                }
                
                await connection.invoke("SendMessage", currentUsername, targetUsername, message);
                messageInput.value = '';
            } catch (err) {
                console.error("Error sending message:", err);
                alert("Mesaj gönderilemedi: " + err.message);
            }
        };

        // SignalR bağlantısını başlat
        async function startConnection() {
            try {
                if (connection.state === "Disconnected") {
                    await connection.start();
                    console.log("SignalR Connected");
                    await connection.invoke("JoinChat", currentUsername);
                }
            } catch (err) {
                console.error("SignalR Connection Error:", err);
                setTimeout(startConnection, 5000);
            }
        }

        // Sayfa yüklendiğinde bağlantıyı başlat
        startConnection();

        // Scroll to bottom after loading chat history
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    });
</script>
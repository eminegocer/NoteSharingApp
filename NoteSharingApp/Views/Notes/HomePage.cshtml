@model List<Note>

<div class="flex h-screen bg-gray-100">
    <!-- Sol Panel: Sohbetler (1/4) -->
    <aside id="chatSidebar" class="w-1/4 bg-white shadow-lg p-4 m-2 rounded-lg overflow-y-auto">
        <div class="flex items-center justify-between mb-4">
            <h2 class="text-xl font-bold text-purple-400">Sohbetler</h2>
            <i class="fas fa-comments text-purple-400"></i>
        </div>
        <div class="space-y-4">
            <div class="bg-gray-50 p-4 rounded-lg">
                <h3 class="text-md font-semibold text-gray-800 mb-2">Kişisel Sohbetler</h3>
                <ul id="personalChatsList" class="space-y-2">
                    <li class="p-3 bg-purple-50 rounded-lg text-gray-500 text-center">
                        Sohbetler yükleniyor...
                    </li>
                </ul>
            </div>
            
            <div class="bg-gray-50 p-4 rounded-lg">
                <h3 class="text-md font-semibold text-gray-800 mb-2">Grup Sohbetleri</h3>
                <ul id="groupChatsList" class="space-y-2">
                    <li class="p-3 bg-blue-50 rounded-lg text-gray-500 text-center">
                        Henüz sohbet bulunmuyor
                    </li>
                </ul>
            </div>

            <div class="bg-gray-50 p-4 rounded-lg">
                <h3 class="text-md font-semibold text-gray-800 mb-2">Okul Grupları</h3>
                <ul id="schoolGroupsList" class="space-y-2">
                    <li class="p-3 bg-green-50 rounded-lg text-gray-500 text-center">
                        Gruplar yükleniyor...
                    </li>
                </ul>
            </div>
        </div>
    </aside>

    <!-- Orta Panel -->
    <main class="w-1/2 p-6 m-2 bg-white shadow-lg rounded-lg overflow-y-auto">
        <!-- Ana sayfa içeriği (notlar) -->
        <div id="mainContent">
            <div class="flex items-center justify-between mb-6">
                <div>
                    <h1 class="text-2xl font-bold text-purple-500">Son Eklenen Notlar</h1>
                    <p class="text-sm text-gray-600/70 mt-1">Paylaşılan en güncel notlar</p>
                </div>
                <a asp-controller="Notes" 
                   asp-action="AddNote" 
                   class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg transition-all duration-300 flex items-center gap-2 shadow-md hover:shadow-lg transform hover:-translate-y-0.5">
                    <i class="fas fa-plus text-sm"></i>
                    <span>Yeni Not</span>
                </a>
            </div>

            <div class="space-y-4">
                @if (Model == null || !Model.Any())
                {
                    <div class="flex flex-col items-center justify-center p-8 bg-gray-50 rounded-lg border-2 border-dashed border-gray-200">
                        <i class="fas fa-notebook mb-3 text-3xl text-gray-400"></i>
                        <p class="text-gray-600 text-center">Henüz paylaşılmış not bulunmuyor.</p>
                        <p class="text-gray-400 text-sm mt-1">İlk notu siz paylaşın!</p>
                    </div>
                }
                else
                {
                    @foreach (var note in Model)
                    {
                        <div class="group bg-green-50 hover:bg-white rounded-xl p-6 transition-all duration-300 border border-gray-100 hover:border-gray-200 hover:shadow-lg cursor-pointer"
                             onclick="window.location='@Url.Action("NoteDetail", "Notes", new { id = note.NoteId, returnUrl = "/Notes/HomePage" })'">
                            <div class="flex items-start justify-between mb-3">
                                <div class="flex-1">
                                    <h3 class="text-lg font-semibold text-gray-800 group-hover:text-gray-900">@note.Title</h3>
                                    <div class="flex items-center gap-3 mt-2">
                                        <span class="px-3 py-1 bg-gray-100/50 text-gray-600 rounded-full text-xs">
                                            <i class="fas fa-book-open mr-1"></i>
                                            Sayfa: @note.Page
                                        </span>
                                        <span class="px-3 py-1 bg-gray-100/50 text-gray-600 rounded-full text-xs">
                                            <i class="fas fa-user mr-1"></i>
                                            @note.OwnerUsername
                                        </span>
                                        <span class="px-3 py-1 bg-gray-100/50 text-gray-600 rounded-full text-xs">
                                            <i class="fas fa-folder mr-1"></i>
                                            @note.Category
                                        </span>
                                        <span class="px-3 py-1 bg-gray-100/50 text-gray-600 rounded-full text-xs">
                                            <i class="fas fa-clock mr-1"></i>
                                            @note.CreatedAt.ToString("dd.MM.yyyy HH:mm")
                                        </span>
                                    </div>
                                </div>
                                <div class="flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                                    <a href="@note.PdfFilePath" target="_blank" class="p-2 text-gray-500 hover:text-green-600 hover:bg-gray-100 rounded-lg transition-colors">
                                        <i class="fas fa-file-pdf"></i>
                                    </a>
                                    <button class="p-2 text-gray-500 hover:text-green-600 hover:bg-gray-100 rounded-lg transition-colors">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="p-2 text-gray-500 hover:text-red-600 hover:bg-gray-100 rounded-lg transition-colors">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <p class="text-gray-600 mb-3 line-clamp-2 group-hover:line-clamp-none transition-all duration-300">
                                @note.Content
                            </p>

                            <div class="mt-4 pt-4 border-t border-gray-100">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center space-x-2">
                                        <button class="text-gray-500 hover:text-green-600 text-sm flex items-center gap-1">
                                            <i class="fas fa-share-alt"></i>
                                            <span>Paylaş</span>
                                        </button>
                                    </div>
                                    <button class="text-gray-500 hover:text-green-600 text-sm flex items-center gap-1">
                                        <i class="fas fa-download"></i>
                                        <span>PDF İndir</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Sohbet içeriği (başlangıçta gizli) -->
        <div id="chatContent" class="hidden h-full">
            <div class="bg-purple-100 text-purple-800 p-3 rounded-t-lg flex justify-between items-center mb-4">
                <h4 id="chatTargetUsername" class="font-bold text-lg"></h4>
                <button id="closePersonalChatBtn" class="text-purple-600 hover:text-purple-800 transition-colors">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <!-- Sohbet içeriği buraya yüklenecek -->
            <div id="messages" class="flex-1 overflow-y-auto p-4 space-y-4 mb-4"></div>
            <div class="flex items-center gap-2 mt-4">
                <input type="file" id="fileInput" class="hidden" />
                <label for="fileInput" class="cursor-pointer">
                    <i class="fas fa-paperclip text-gray-500 hover:text-purple-600"></i>
                </label>
                <input type="text" id="messageInput" placeholder="Mesajınızı yazın..." class="flex-1 p-2 border rounded-lg focus:ring-2 focus:ring-purple-400 focus:border-purple-400" />
                <button id="sendButton" class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg transition-all duration-300">
                    Gönder
                </button>
            </div>
        </div>

        <!-- Grup sohbet paneli (başlangıçta gizli) -->
        <div id="groupChatPanel" class="hidden h-full">
            <div class="bg-white rounded-lg shadow-lg p-4 mb-6 border-l-4 border-purple-500">
                <div class="bg-purple-100 text-purple-800 p-3 rounded-t-lg flex justify-between items-center">
                    <h4 id="selectedGroupName" class="font-bold text-lg"></h4>
                    <button onclick="closeGroupChat()" class="text-purple-600 hover:text-purple-800 transition-colors">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <div class="p-3">
                    <!-- Mesajlar bölümü -->
                    <div id="groupMessages" class="mb-4 max-h-[400px] overflow-y-auto">
                        <!-- Mesajlar buraya yüklenecek -->
                    </div>

                    <div class="welcome-message">
                        <div class="bg-green-50 text-green-700 p-4 rounded-lg mb-4 flex items-start">
                            <i class="fas fa-info-circle mr-3 mt-1 text-green-500"></i>
                            <div>
                                <p class="font-semibold mb-1">Bu gruba katılarak:</p>
                                <ul class="list-disc pl-5 text-sm">
                                    <li>Grup üyeleriyle not paylaşabilirsiniz</li>
                                    <li>Ders materyallerine erişebilirsiniz</li>
                                    <li>Sorularınızı sorabilirsiniz</li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <div class="p-3 border-t border-gray-200 flex justify-center gap-4 mt-2">
                        <button id="joinGroupBtn" class="bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 flex items-center">
                            <i class="fas fa-sign-in-alt mr-2"></i>Gruba Katıl
                        </button>
                        <button id="cancelGroupBtn" class="bg-white hover:bg-gray-100 text-gray-700 border border-gray-300 font-semibold py-2 px-6 rounded-lg transition-all duration-300 hover:shadow-md flex items-center">
                            <i class="fas fa-times mr-2"></i>Vazgeç
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Aktif Grup Sohbet Paneli (başlangıçta gizli) -->
        <div id="activeGroupChatPanel" class="hidden h-full flex flex-col">
            <div class="bg-purple-100 text-purple-800 p-3 rounded-t-lg flex justify-between items-center">
                <h4 id="activeGroupName" class="font-bold text-lg"></h4>
                <button id="closeGroupChatBtn" class="text-purple-600 hover:text-purple-800 transition-colors">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div id="activeGroupMessages" class="flex-1 overflow-y-auto p-4 bg-gray-50">
                <!-- Mesajlar buraya yüklenecek -->
            </div>
            <div class="p-4 border-t bg-white">
                <div class="flex items-center gap-2">
                    <input type="text" id="groupMessageInput" placeholder="Mesajınızı yazın..." class="flex-1 p-2 border rounded-lg focus:ring-2 focus:ring-purple-400 focus:border-purple-400" />
                    <button id="sendGroupMessageBtn" class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg transition-all duration-300">
                        Gönder
                    </button>
                    <!-- İsteğe bağlı: Dosya yükleme butonu -->
                    <input type="file" id="groupFileInput" class="hidden" />
                    <label for="groupFileInput" class="cursor-pointer text-gray-500 hover:text-purple-600 p-2">
                        <i class="fas fa-paperclip"></i>
                    </label>
                </div>
            </div>
        </div>
    </main>

    <!-- Sağ Panel: Sohbet Başlat (1/4) -->
    <aside class="w-1/4 bg-white shadow-lg p-4 m-2 rounded-lg">
        <div class="flex items-center justify-between mb-4">
            <h2 class="text-xl font-bold text-purple-400">Yeni Sohbet</h2>
            <i class="fas fa-comments text-purple-400"></i>
        </div>

        <!-- Kişisel Sohbet -->
        <div class="space-y-3 mb-3">
            <h3 class="text-sm font-semibold text-gray-700">Kişisel Sohbet</h3>
            <div class="space-y-3">
                <form asp-action="AddChatDb" method="post" onsubmit="return handleChatSubmit(event)">
                    <div class="relative">
                        <input type="text"
                               name="userName"
                               id="userSearchInput"
                               class="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-purple-400 focus:border-purple-400 outline-none mb-3"
                               placeholder="Kullanıcı adı girin...">
                        <div id="userSuggestions"
                             class="absolute left-0 right-0 top-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-48 overflow-y-auto">
                        </div>
                    </div>
                    <button type="submit" class="w-full bg-purple-500 hover:bg-purple-600 text-white font-semibold p-3 rounded-lg transition-colors flex items-center justify-center gap-2">
                        <i class="fas fa-user-plus"></i>
                        <span>Kişisel Sohbet Başlat</span>
                    </button>
                </form>

                <!-- Chat Panel (Başlatılan sohbet burada görünecek) -->
                <div id="chatPanel" class="hidden mt-6">
                    <!-- Buraya Chat partial view'ı dinamik olarak ekleyeceğiz -->
                </div>
            </div>
        </div>

        <!-- Grup Ara -->
        <div class="space-y-3 mb-6">
            <h3 class="text-sm font-semibold text-gray-700">Grup Ara</h3>
            <div class="space-y-3">
                <div class="relative">
                    <input type="text"
                           id="schoolGroupSearchInput"
                           class="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-purple-400 focus:border-purple-400 outline-none"
                           placeholder="Bölüm adı veya okul adı girin...">
                    <div id="schoolGroupSuggestions"
                         class="absolute left-0 right-0 top-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-48 overflow-y-auto hidden">
                    </div>
                </div>
                
                <input type="hidden" id="selectedGroupId">
                
                <button id="searchSchoolGroupsBtn" class="w-full bg-purple-500 hover:bg-purple-600 text-white font-semibold p-3 rounded-lg transition-colors flex items-center justify-center gap-2">
                    <i class="fas fa-school"></i>
                    <span>Okul/Bölüm Ara</span>
                </button>
            </div>
        </div>

        <!-- Grup Oluştur -->
        <div class="space-y-3 mb-6">
            <h3 class="text-sm font-semibold text-gray-700">Yeni Grup</h3>
            <div class="space-y-3">
                <div class="relative">
                    <input type="text"
                           id="groupNameInput"
                           class="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-purple-400 focus:border-purple-400 outline-none"
                           placeholder="Grup adı girin...">
                </div>
                
                <!-- Kullanıcı Seçimi -->
                <div class="relative">
                    <input type="text"
                           id="groupUserSearchInput"
                           class="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-purple-400 focus:border-purple-400 outline-none"
                           placeholder="Kullanıcı adı girin...">
                    <div id="groupUserSuggestions"
                         class="absolute left-0 right-0 top-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-48 overflow-y-auto hidden">
                    </div>
                </div>

                <!-- Seçilen Kullanıcılar -->
                <div id="selectedUsers" class="flex flex-wrap gap-2 p-2 bg-gray-50 rounded-lg min-h-[50px]">
                    <!-- Seçilen kullanıcılar buraya eklenecek -->
                </div>

                <button onclick="createGroup()" class="w-full bg-purple-500 hover:bg-purple-600 text-white font-semibold p-3 rounded-lg transition-colors flex items-center justify-center gap-2">
                    <i class="fas fa-users"></i>
                    <span>Grup Oluştur</span>
                </button>
            </div>
        </div>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
        <script>
            // SignalR bağlantı değişkeni
            let signalRConnection = null;
            let currentActiveGroupId = null;

            // Kullanıcı renkleri için nesne ve renk paleti
            let userColors = {};
            const chatColorPalette = [
                { bg: 'bg-blue-200', text: 'text-blue-800', textLight: 'text-blue-600' },
                { bg: 'bg-green-200', text: 'text-green-800', textLight: 'text-green-600' },
                { bg: 'bg-rose-200', text: 'text-rose-800', textLight: 'text-rose-600' },
                { bg: 'bg-amber-200', text: 'text-amber-800', textLight: 'text-amber-600' },
                { bg: 'bg-violet-200', text: 'text-violet-800', textLight: 'text-violet-600' },
                { bg: 'bg-teal-200', text: 'text-teal-800', textLight: 'text-teal-600' },
                { bg: 'bg-fuchsia-200', text: 'text-fuchsia-800', textLight: 'text-fuchsia-600' },
                { bg: 'bg-sky-200', text: 'text-sky-800', textLight: 'text-sky-600' },
                { bg: 'bg-lime-200', text: 'text-lime-800', textLight: 'text-lime-600' },
                { bg: 'bg-purple-200', text: 'text-purple-800', textLight: 'text-purple-600' }
            ];
            let nextColorIndex = 0;

            // Kullanıcıya renk atayan fonksiyon
            function getUserColor(username) {
                if (!userColors[username]) {
                    userColors[username] = chatColorPalette[nextColorIndex % chatColorPalette.length];
                    nextColorIndex++;
                }
                return userColors[username];
            }

            document.addEventListener('DOMContentLoaded', function () {
                let typingTimer;
                const doneTypingInterval = 300;

                // Sayfa yüklendiğinde kişisel sohbetleri ve grupları yükle
                loadPersonalChats();
                loadGroups();
                loadSchoolGroups();

                // Kullanıcı arama input olayı
                const userSearchInput = document.getElementById('userSearchInput');
                const suggestionsDiv = document.getElementById('userSuggestions');

                userSearchInput.addEventListener('input', function() {
                    clearTimeout(typingTimer);
                    if (userSearchInput.value) {
                        typingTimer = setTimeout(function() {
                            searchUsers(userSearchInput.value);
                        }, doneTypingInterval);
                    } else {
                        suggestionsDiv.classList.add('hidden');
                    }
                });

                // Kullanıcı arama fonksiyonu
                function searchUsers(searchTerm) {
                    fetch(`/Chat/SearchUsers?searchTerm=${encodeURIComponent(searchTerm)}`)
                        .then(response => response.json())
                        .then(users => {
                            const suggestionsDiv = document.getElementById('userSuggestions');
                            suggestionsDiv.innerHTML = '';

                            if (users && users.length > 0) {
                                users.forEach(user => {
                                    const suggestion = document.createElement('div');
                                    suggestion.className = 'p-3 hover:bg-purple-50 cursor-pointer transition-colors border-b border-gray-100 last:border-0';
                                    suggestion.innerHTML = `
                                        <div class="flex items-center gap-2">
                                            <i class="fas fa-user text-purple-400"></i>
                                            <span class="text-gray-700">${user.username}</span>
                                        </div>
                                    `;
                                    suggestion.onclick = () => {
                                        userSearchInput.value = user.username;
                                        suggestionsDiv.classList.add('hidden');
                                    };
                                    suggestionsDiv.appendChild(suggestion);
                                });
                                suggestionsDiv.classList.remove('hidden');
                            } else {
                                const noResult = document.createElement('div');
                                noResult.className = 'p-3 text-center text-gray-500';
                                noResult.textContent = 'Sonuç bulunamadı';
                                suggestionsDiv.appendChild(noResult);
                                suggestionsDiv.classList.remove('hidden');
                            }
                        })
                        .catch(error => {
                            const suggestionsDiv = document.getElementById('userSuggestions');
                            suggestionsDiv.innerHTML = '<div class="p-3 text-center text-red-500">Bir hata oluştu</div>';
                            suggestionsDiv.classList.remove('hidden');
                        });
                }

                // Tıklama olayları
                document.addEventListener('click', function(e) {
                    if (!userSearchInput.contains(e.target) && !suggestionsDiv.contains(e.target)) {
                        suggestionsDiv.classList.add('hidden');
                    }
                });

                // Form submit işlemi
                window.handleChatSubmit = function(event) {
                    event.preventDefault();
                    const userName = userSearchInput.value.trim();
                    
                    if (!userName) {
                        alert('Lütfen bir kullanıcı adı girin.');
                        return false;
                    }

                    fetch('/Chat/StartPersonalChat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ username: userName })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            loadChat(data.targetUsername);
                            updatePersonalChatsList(data.targetUsername);
                            userSearchInput.value = '';
                            suggestionsDiv.classList.add('hidden');
                        } else {
                            alert(data.message || 'Sohbet başlatılırken bir hata oluştu.');
                        }
                    })
                    .catch(error => {
                        alert('Bir hata oluştu. Lütfen tekrar deneyin.');
                    });

                    return false;
                };

                // Kişisel sohbetleri yükleme fonksiyonu
                function loadPersonalChats() {
                    fetch('/Chat/GetChatUsersForHomePage')
                        .then(response => response.json())
                        .then(chatUsers => {
                            const personalChatsList = document.getElementById('personalChatsList');
                            personalChatsList.innerHTML = '';

                            if (chatUsers && chatUsers.length > 0) {
                                chatUsers.forEach(username => {
                                    const chatItem = document.createElement('li');
                                    chatItem.className = 'p-3 bg-purple-50 rounded-lg hover:bg-purple-100 transition-colors cursor-pointer flex items-center gap-2';
                                    chatItem.onclick = () => loadChat(username);
                                    chatItem.innerHTML = `
                                        <i class="fas fa-user-circle text-purple-400"></i>
                                        <span>${username}</span>
                                    `;
                                    personalChatsList.appendChild(chatItem);
                                });
                            } else {
                                const noChatsItem = document.createElement('li');
                                noChatsItem.className = 'p-3 bg-purple-50 rounded-lg text-gray-500 text-center';
                                noChatsItem.textContent = 'Henüz sohbet bulunmuyor';
                                personalChatsList.appendChild(noChatsItem);
                            }
                        })
                        .catch(error => {
                            console.error('Sohbet listesi yüklenirken hata oluştu:', error);
                            const personalChatsList = document.getElementById('personalChatsList');
                            personalChatsList.innerHTML = '<li class="p-3 bg-purple-50 rounded-lg text-red-500 text-center">Sohbet listesi yüklenemedi</li>';
                        });
                }

                // Sohbet yükleme
                window.loadChat = function(username) {
                    // Mevcut açık sohbeti kapat
                    const mainContent = document.getElementById('mainContent');
                    const chatContent = document.getElementById('chatContent');
                    const groupChatPanel = document.getElementById('groupChatPanel');
                    const activeGroupChatPanel = document.getElementById('activeGroupChatPanel');
                    
                    // Tüm sohbet panellerini gizle
                    groupChatPanel.classList.add('hidden');
                    activeGroupChatPanel.classList.add('hidden');
                    
                    // SignalR bağlantısını kapat (varsa)
                    if (signalRConnection && signalRConnection.state === "Connected") {
                        signalRConnection.stop().catch(function (err) {
                            console.error('SignalR bağlantısı kapatılırken hata:', err);
                        });
                    }

                    // Yeni sohbeti aç
                    fetch(`/Chat/ChatView?targetUsername=${encodeURIComponent(username)}`)
                        .then(response => response.text())
                        .then(html => {
                            const chatHeader = document.createElement('div');
                            chatHeader.className = 'bg-purple-100 text-purple-800 p-3 rounded-t-lg flex justify-between items-center mb-4';
                            chatHeader.innerHTML = `
                                <div class="flex items-center gap-3">
                                    <div class="w-10 h-10 rounded-full bg-purple-200 flex items-center justify-center">
                                        <i class="fas fa-user text-purple-500 text-lg"></i>
                                    </div>
                                    <div>
                                        <h4 class="font-bold text-lg">${username}</h4>
                                        <span class="text-sm text-purple-600">Çevrimiçi</span>
                                    </div>
                                </div>
                                <button id="closePersonalChatBtn" class="text-purple-600 hover:text-purple-800 transition-colors">
                                    <i class="fas fa-times"></i>
                                </button>
                            `;

                            mainContent.classList.add('hidden');
                            chatContent.innerHTML = '';
                            chatContent.appendChild(chatHeader);

                            // HTML içeriğinden gereksiz kullanıcı adını kaldır
                            const tempDiv = document.createElement('div');
                            tempDiv.innerHTML = html;
                            const userInfoDiv = tempDiv.querySelector('.flex.items-center');
                            if (userInfoDiv) {
                                userInfoDiv.remove();
                            }
                            
                            chatContent.insertAdjacentHTML('beforeend', tempDiv.innerHTML);
                            chatContent.classList.remove('hidden');

                            // Çarpı butonuna tıklama olayını ekle
                            document.getElementById('closePersonalChatBtn').addEventListener('click', function() {
                                mainContent.classList.remove('hidden');
                                chatContent.classList.add('hidden');
                                chatContent.innerHTML = '';
                                
                                // SignalR bağlantısını kapat
                                if (signalRConnection && signalRConnection.state === "Connected") {
                                    signalRConnection.stop().catch(function (err) {
                                        console.error('SignalR bağlantısı kapatılırken hata:', err);
                                    });
                                }
                            });

                            // SignalR bağlantısını başlat
                            startSignalRConnection(username);
                        })
                        .catch(error => {
                            alert('Sohbet yüklenirken bir hata oluştu.');
                        });
                };

                // SignalR bağlantısını başlat
                function startSignalRConnection(targetUsername) {
                    const connection = new signalR.HubConnectionBuilder()
                        .withUrl("/chatHub")
                        .withAutomaticReconnect()
                        .build();

                    connection.on("ReceiveMessage", (senderUsername, message) => {
                        const messagesDiv = document.getElementById('messages');
                        const messageDiv = document.createElement('div');
                        const isCurrentUser = senderUsername === '@User.Identity.Name';
                        
                        messageDiv.className = `flex ${isCurrentUser ? 'justify-end' : 'justify-start'} mb-4`;
                        messageDiv.innerHTML = `
                            <div class="${isCurrentUser ? 'bg-purple-500 text-white' : 'bg-white text-gray-800'} rounded-lg p-3 max-w-[70%] shadow-sm">
                                <p class="break-words">${message}</p>
                                <span class="text-xs ${isCurrentUser ? 'text-purple-100' : 'text-gray-500'} block mt-1">
                                    ${new Date().toLocaleTimeString()}
                                </span>
                            </div>
                        `;
                        
                        messagesDiv.appendChild(messageDiv);
                        messagesDiv.scrollTop = messagesDiv.scrollHeight;
                    });

                    connection.start()
                        .then(() => {
                            connection.invoke("JoinChat", '@User.Identity.Name');

                            // Mesaj gönderme fonksiyonunu global scope'a ekle
                            window.sendMessage = async function() {
                                const messageInput = document.getElementById('messageInput');
                                const message = messageInput.value.trim();
                                
                                if (message) {
                                    connection.invoke("SendMessage", '@User.Identity.Name', targetUsername, message);
                                        messageInput.value = '';
                                }
                            };

                            // Enter tuşu ile mesaj gönderme
                            const messageInput = document.getElementById('messageInput');
                            if (messageInput) {
                                messageInput.addEventListener('keypress', function(event) {
                                    if (event.key === 'Enter') {
                                        event.preventDefault();
                                        sendMessage();
                                    }
                                });
                            }
                        })
                        .catch(err => {
                            alert("SignalR Connection Error");
                        });
                }

                // Sohbet listesi güncelleme
                window.updatePersonalChatsList = function(newUsername) {
                    const personalChatsList = document.getElementById('personalChatsList');
                    const existingChats = personalChatsList.querySelectorAll('li');

                    if (existingChats.length === 1 && existingChats[0].classList.contains('text-center')) {
                        personalChatsList.innerHTML = '';
                    }

                    const existingChat = Array.from(existingChats).find(chat =>
                        chat.textContent.trim() === newUsername
                    );

                    if (!existingChat) {
                        const newChatItem = document.createElement('li');
                        newChatItem.className = 'p-3 bg-purple-50 rounded-lg hover:bg-purple-100 transition-colors cursor-pointer flex items-center gap-2';
                        newChatItem.onclick = () => loadChat(newUsername);
                        newChatItem.innerHTML = `
                            <i class="fas fa-user-circle text-purple-400"></i>
                            <span>${newUsername}</span>
                        `;
                        personalChatsList.insertBefore(newChatItem, personalChatsList.firstChild);
                    }
                };

                // Çarpı butonuna tıklama olayını ekle
                document.getElementById('closeGroupChatBtn').addEventListener('click', function() {
                    const mainContent = document.getElementById('mainContent');
                    const groupChatPanel = document.getElementById('groupChatPanel');
                    const activeGroupChatPanel = document.getElementById('activeGroupChatPanel');
                    const chatContent = document.getElementById('chatContent');
                    
                    // Tüm sohbet panellerini gizle
                    groupChatPanel.classList.add('hidden');
                    activeGroupChatPanel.classList.add('hidden');
                    chatContent.classList.add('hidden');
                    
                    // Ana sayfayı göster
                    mainContent.classList.remove('hidden');
                    
                    // Aktif grup ID'sini temizle
                    currentActiveGroupId = null;
                    
                    // Mesaj içeriğini temizle
                    document.getElementById('activeGroupMessages').innerHTML = '';
                    
                    // SignalR bağlantısını gruptan çıkar
                    if (signalRConnection && signalRConnection.state === "Connected") {
                        signalRConnection.invoke("LeaveGroup", currentActiveGroupId).catch(function (err) {
                            console.error(err);
                        });
                    }
                });

                // Kişisel sohbet kapatma butonu
                document.getElementById('closePersonalChatBtn').addEventListener('click', function() {
                    const mainContent = document.getElementById('mainContent');
                    const chatContent = document.getElementById('chatContent');
                    
                    // Sohbet panelini gizle
                    chatContent.classList.add('hidden');
                    
                    // Ana sayfayı göster
                    mainContent.classList.remove('hidden');
                    
                    // Mesaj içeriğini temizle
                    document.getElementById('messages').innerHTML = '';
                    document.getElementById('messageInput').value = '';
                    
                    // SignalR bağlantısını kapat (isteğe bağlı)
                    if (signalRConnection && signalRConnection.state === "Connected") {
                        signalRConnection.stop().catch(function (err) {
                            console.error('SignalR bağlantısı kapatılırken hata:', err);
                        });
                    }
                });

                function searchSchoolGroups(searchTerm) {
                    fetch(`/Chat/GetGroup?searchTerm=${encodeURIComponent(searchTerm)}`)
                        .then(response => response.json())
                        .then(groups => {
                            const suggestionsDiv = document.getElementById('schoolGroupSuggestions');
                            suggestionsDiv.innerHTML = '';

                            if (groups && groups.length > 0) {
                                groups.forEach(group => {
                                    const suggestion = document.createElement('div');
                                    suggestion.className = 'p-3 hover:bg-purple-50 cursor-pointer transition-colors border-b border-gray-100 last:border-0';
                                    suggestion.innerHTML = `
                                        <div class="flex flex-col gap-1">
                                            <div class="flex items-center gap-2">
                                                <i class="fas fa-users text-purple-400"></i>
                                                <span class="text-gray-700 font-semibold">${group.groupName}</span>
                                            </div>
                                            <div class="flex items-center gap-2 text-sm text-gray-500">
                                                <i class="fas fa-school text-purple-300"></i>
                                                <span>${group.schoolName}</span>
                                            </div>
                                            <div class="flex items-center gap-2 text-sm text-gray-500">
                                                <i class="fas fa-graduation-cap text-purple-300"></i>
                                                <span>${group.departmentName}</span>
                                            </div>
                                        </div>
                                    `;
                                    suggestion.onclick = () => {
                                        document.getElementById('schoolGroupSearchInput').value = group.groupName;
                                        document.getElementById('selectedGroupId').value = group.id;
                                        suggestionsDiv.classList.add('hidden');
                                    };
                                    suggestionsDiv.appendChild(suggestion);
                                });
                                suggestionsDiv.classList.remove('hidden');
                            } else {
                                const noResult = document.createElement('div');
                                noResult.className = 'p-3 text-center text-gray-500';
                                noResult.textContent = 'Sonuç bulunamadı';
                                suggestionsDiv.appendChild(noResult);
                                suggestionsDiv.classList.remove('hidden');
                            }
                        })
                        .catch(error => {
                            const suggestionsDiv = document.getElementById('schoolGroupSuggestions');
                            suggestionsDiv.innerHTML = '<div class="p-3 text-center text-red-500">Bir hata oluştu</div>';
                            suggestionsDiv.classList.remove('hidden');
                        });
                }

                // Okul/Bölüm arama input olayı
                document.getElementById('schoolGroupSearchInput').addEventListener('input', function() {
                    const searchTerm = this.value.trim();
                    const suggestionsDiv = document.getElementById('schoolGroupSuggestions');

                    if (searchTerm.length < 2) {
                        suggestionsDiv.classList.add('hidden');
                        return;
                    }

                    clearTimeout(typingTimer);
                    typingTimer = setTimeout(() => {
                        searchSchoolGroups(searchTerm);
                    }, doneTypingInterval);
                });

                // Tıklama olayları için event listener
                document.addEventListener('click', function(e) {
                    const suggestionsDiv = document.getElementById('schoolGroupSuggestions');
                    const searchInput = document.getElementById('schoolGroupSearchInput');
                    
                    if (!searchInput.contains(e.target) && !suggestionsDiv.contains(e.target)) {
                        suggestionsDiv.classList.add('hidden');
                    }
                });

                // Grup oluşturma için kullanıcı arama ve seçme işlemleri
                let selectedUsers = new Set();

                document.getElementById('groupUserSearchInput').addEventListener('input', function(e) {
                    const searchTerm = e.target.value.trim();
                    const suggestionsDiv = document.getElementById('groupUserSuggestions');
                    
                    if (searchTerm.length < 2) {
                        suggestionsDiv.classList.add('hidden');
                        return;
                    }
                    
                    // Kullanıcı arama API'sini çağır
                    fetch(`/Chat/SearchUsers?searchTerm=${encodeURIComponent(searchTerm)}`)
                        .then(response => response.json())
                        .then(users => {
                            suggestionsDiv.innerHTML = '';
                            suggestionsDiv.classList.remove('hidden');
                            
                            users.forEach(user => {
                                if (!selectedUsers.has(user.username)) {
                                    const suggestion = document.createElement('div');
                                    suggestion.className = 'p-3 hover:bg-purple-50 cursor-pointer transition-colors border-b border-gray-100 last:border-0';
                                    suggestion.innerHTML = `
                                        <div class="flex items-center gap-2">
                                            <i class="fas fa-user text-purple-400"></i>
                                            <span class="text-gray-700">${user.username}</span>
                                        </div>
                                    `;
                                    
                                    suggestion.onclick = () => selectUser(user.username);
                                    suggestionsDiv.appendChild(suggestion);
                                }
                            });
                        });
                });

                function selectUser(username) {
                    if (!selectedUsers.has(username)) {
                        selectedUsers.add(username);
                        updateSelectedUsersDisplay();
                    }
                    
                    // Arama input'unu temizle ve önerileri gizle
                    document.getElementById('groupUserSearchInput').value = '';
                    document.getElementById('groupUserSuggestions').classList.add('hidden');
                }

                function removeUser(username) {
                    selectedUsers.delete(username);
                    updateSelectedUsersDisplay();
                }

                function updateSelectedUsersDisplay() {
                    const selectedUsersDiv = document.getElementById('selectedUsers');
                    selectedUsersDiv.innerHTML = '';
                    
                    selectedUsers.forEach(username => {
                        const userChip = document.createElement('div');
                        userChip.className = 'flex items-center gap-2 bg-purple-100 text-purple-700 px-3 py-1 rounded-full';
                        userChip.innerHTML = `
                            <span>${username}</span>
                            <button onclick="removeUser('${username}')" class="text-purple-500 hover:text-purple-700">
                                <i class="fas fa-times"></i>
                            </button>
                        `;
                        selectedUsersDiv.appendChild(userChip);
                    });
                }

                // Normal grupları yükle
                function loadGroups() {
                    fetch('/Chat/GetUserGroups')
                        .then(response => response.json())
                        .then(groups => {
                            const groupChatsList = document.getElementById('groupChatsList');
                            groupChatsList.innerHTML = '';

                            if (groups && groups.length > 0) {
                                groups.forEach(group => {
                                    const groupItem = document.createElement('li');
                                    groupItem.className = 'p-3 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors cursor-pointer flex items-center gap-2';
                                    groupItem.innerHTML = `
                                        <i class="fas fa-users text-blue-400"></i>
                                        <span>${group.groupName}</span>
                                    `;
                                    groupItem.onclick = () => loadGroupChat(group.id, group.groupName);
                                    groupChatsList.appendChild(groupItem);
                                });
                            } else {
                                const noGroupsItem = document.createElement('li');
                                noGroupsItem.className = 'p-3 bg-blue-50 rounded-lg text-gray-500 text-center';
                                noGroupsItem.textContent = 'Henüz sohbet bulunmuyor';
                                groupChatsList.appendChild(noGroupsItem);
                            }
                        })
                        .catch(error => {
                            console.error('Gruplar yüklenirken hata oluştu:', error);
                            const groupChatsList = document.getElementById('groupChatsList');
                            groupChatsList.innerHTML = '<li class="p-3 bg-blue-50 rounded-lg text-red-500 text-center">Gruplar yüklenemedi</li>';
                        });
                }

                // Okul gruplarını yükle
                function loadSchoolGroups() {
                    fetch('/Chat/GetUserSchoolGroups')
                        .then(response => response.json())
                        .then(groups => {
                            const schoolGroupsList = document.getElementById('schoolGroupsList');
                            schoolGroupsList.innerHTML = '';

                            if (groups && groups.length > 0) {
                                groups.forEach(group => {
                                    const groupItem = document.createElement('li');
                                    groupItem.className = 'p-3 bg-green-50 rounded-lg hover:bg-green-100 transition-colors cursor-pointer flex items-center gap-2';
                                    groupItem.innerHTML = `
                                        <i class="fas fa-school text-green-400"></i>
                                        <span>${group.groupName}</span>
                                    `;
                                    groupItem.onclick = () => loadGroupChat(group.id, group.groupName);
                                    schoolGroupsList.appendChild(groupItem);
                                });
                            } else {
                                const noGroupsItem = document.createElement('li');
                                noGroupsItem.className = 'p-3 bg-green-50 rounded-lg text-gray-500 text-center';
                                noGroupsItem.textContent = 'Henüz okul grubu bulunmuyor';
                                schoolGroupsList.appendChild(noGroupsItem);
                            }
                        })
                        .catch(error => {
                            console.error('Okul grupları yüklenirken hata oluştu:', error);
                            const schoolGroupsList = document.getElementById('schoolGroupsList');
                            schoolGroupsList.innerHTML = '<li class="p-3 bg-green-50 rounded-lg text-red-500 text-center">Okul grupları yüklenemedi</li>';
                        });
                }

                // Grup oluşturma fonksiyonunu güncelle
                window.createGroup = function() {
                    const groupName = document.getElementById('groupNameInput').value.trim();
                    if (!groupName) {
                        alert('Lütfen bir grup adı girin.');
                        return;
                    }

                    if (selectedUsers.size === 0) {
                        alert('Lütfen en az bir kullanıcı seçin.');
                        return;
                    }

                    const groupData = {
                        groupName: groupName,
                        users: Array.from(selectedUsers)
                    };

                    fetch('/Notes/CreateGroup', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(groupData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Grup başarıyla oluşturuldu!');
                            document.getElementById('groupNameInput').value = '';
                            selectedUsers.clear();
                            updateSelectedUsersDisplay();
                            
                            // Yeni grup oluşturulduktan sonra grupları yeniden yükle
                            loadGroups();
                        } else {
                            alert('Grup oluşturulamadı: ' + data.message);
                        }
                    })
                    .catch(error => {
                        alert('Bir hata oluştu. Lütfen tekrar deneyin.');
                    });
                }

                // Grup sohbetini yüklemek için fonksiyon
                function loadGroupChat(groupId, groupName) {
                    const mainContent = document.getElementById('mainContent');
                    const chatContent = document.getElementById('chatContent');
                    const groupChatPanel = document.getElementById('groupChatPanel');
                    const activeGroupChatPanel = document.getElementById('activeGroupChatPanel');
                    
                    // Diğer panelleri gizle
                    mainContent.classList.add('hidden');
                    chatContent.classList.add('hidden');
                    groupChatPanel.classList.add('hidden');
                    
                    // Aktif grup panelini göster
                    activeGroupChatPanel.classList.remove('hidden');
                    
                    // Grup adını yaz
                    document.getElementById('activeGroupName').textContent = groupName;
                    currentActiveGroupId = groupId;

                    // Önce eski mesajları yükle
                    fetch(`/Chat/GetGroupMessages?groupId=${encodeURIComponent(groupId)}`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Mesajlar yüklenemedi');
                            }
                            return response.json();
                        })
                        .then(messages => {
                            const messagesDiv = document.getElementById('activeGroupMessages');
                            messagesDiv.innerHTML = '';

                            if (messages && messages.length > 0) {
                                messages.forEach(message => {
                                    const isCurrentUser = message.senderUsername === '@User.Identity.Name';
                                    const userColor = getUserColor(message.senderUsername);
                                    const messageDiv = document.createElement('div');
                                    messageDiv.className = `w-full flex flex-col ${isCurrentUser ? 'items-end' : 'items-start'} mb-3`;

                                    const bubbleContainer = document.createElement('div');
                                    bubbleContainer.className = `max-w-[75%]`;

                                    const messageBubble = document.createElement('div');
                                    let bubbleBaseClasses = 'rounded-lg py-2 px-3 shadow-sm inline-block';
                                    messageBubble.className = `${bubbleBaseClasses} ${userColor.bg} ${userColor.text}`;

                                    const senderNameSpan = document.createElement('div');
                                    senderNameSpan.className = `text-xs font-semibold mb-1 ${userColor.textLight}`;
                                    senderNameSpan.textContent = message.senderUsername;
                                    messageBubble.appendChild(senderNameSpan);

                                    const messageContent = document.createElement('p');
                                    messageContent.className = "break-words text-sm";
                                    messageContent.textContent = message.content;
                                    messageBubble.appendChild(messageContent);

                                    const timestampSpan = document.createElement('span');
                                    timestampSpan.className = `text-xs ${userColor.textLight} block mt-1 text-right opacity-75`;
                                    const messageDate = new Date(message.sentAt || message.createdAt);
                                    timestampSpan.textContent = messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                                    messageBubble.appendChild(timestampSpan);

                                    bubbleContainer.appendChild(messageBubble);
                                    messageDiv.appendChild(bubbleContainer);
                                    messagesDiv.appendChild(messageDiv);
                                });

                                messagesDiv.scrollTop = messagesDiv.scrollHeight;
                            } else {
                                const noMessages = document.createElement('div');
                                noMessages.className = 'text-center text-gray-500 p-4';
                                noMessages.textContent = 'Henüz mesaj yok.';
                                messagesDiv.appendChild(noMessages);
                            }

                            // SignalR bağlantısını kur veya yeniden kullan
                            if (!signalRConnection || signalRConnection.state !== "Connected") {
                                signalRConnection = new signalR.HubConnectionBuilder()
                                    .withUrl("/chatHub")
                                    .withAutomaticReconnect()
                                    .build();

                                // Grup mesajı alma event'ini tanımla
                                signalRConnection.on("ReceiveGroupMessage", (receivedGroupId, senderUsername, message) => {
                                    if (receivedGroupId === currentActiveGroupId) {
                                        const messagesDiv = document.getElementById('activeGroupMessages');
                                        const isCurrentUser = senderUsername === '@User.Identity.Name';
                                        const userColor = getUserColor(senderUsername);
                                        
                                        const messageDiv = document.createElement('div');
                                        messageDiv.className = `w-full flex flex-col ${isCurrentUser ? 'items-end' : 'items-start'} mb-3`;

                                        const bubbleContainer = document.createElement('div');
                                        bubbleContainer.className = `max-w-[75%]`;

                                        const messageBubble = document.createElement('div');
                                        let bubbleBaseClasses = 'rounded-lg py-2 px-3 shadow-sm inline-block';
                                        messageBubble.className = `${bubbleBaseClasses} ${userColor.bg} ${userColor.text}`;

                                        const senderNameSpan = document.createElement('div');
                                        senderNameSpan.className = `text-xs font-semibold mb-1 ${userColor.textLight}`;
                                        senderNameSpan.textContent = senderUsername;
                                        messageBubble.appendChild(senderNameSpan);

                                        const messageContent = document.createElement('p');
                                        messageContent.className = "break-words text-sm";
                                        messageContent.textContent = message;
                                        messageBubble.appendChild(messageContent);

                                        const timestampSpan = document.createElement('span');
                                        timestampSpan.className = `text-xs ${userColor.textLight} block mt-1 text-right opacity-75`;
                                        timestampSpan.textContent = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                                        messageBubble.appendChild(timestampSpan);

                                        bubbleContainer.appendChild(messageBubble);
                                        messageDiv.appendChild(bubbleContainer);
                                        messagesDiv.appendChild(messageDiv);

                                        messagesDiv.scrollTop = messagesDiv.scrollHeight;
                                    }
                                });

                                // SignalR bağlantısını başlat
                                signalRConnection.start().then(() => {
                                    console.log("SignalR Connected");
                                    // Gruba katıl
                                    signalRConnection.invoke("JoinGroup", groupId).catch(function (err) {
                                        console.error('Gruba katılırken hata:', err);
                                    });
                                }).catch(err => {
                                    console.error("SignalR Connection Error:", err);
                                });
                            } else {
                                // Bağlantı zaten varsa, sadece gruba katıl
                                signalRConnection.invoke("JoinGroup", groupId).catch(function (err) {
                                    console.error('Gruba katılırken hata:', err);
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Mesajlar yüklenirken hata oluştu:', error);
                            const messagesDiv = document.getElementById('activeGroupMessages');
                            messagesDiv.innerHTML = '<div class="text-center text-red-500 p-4">Mesajlar yüklenemedi. Lütfen sayfayı yenileyip tekrar deneyin.</div>';
                        });

                    // Mesaj gönderme butonunu ve input alanını ayarla
                    const sendBtn = document.getElementById('sendGroupMessageBtn');
                    const messageInput = document.getElementById('groupMessageInput');
                    
                    // Önceki event listener'ları temizle
                    const newSendBtn = sendBtn.cloneNode(true);
                    const newMessageInput = messageInput.cloneNode(true);
                    sendBtn.parentNode.replaceChild(newSendBtn, sendBtn);
                    messageInput.parentNode.replaceChild(newMessageInput, messageInput);
                    
                    // Yeni event listener'ları ekle
                    newSendBtn.onclick = () => sendGroupMessage(groupId);
                    newMessageInput.addEventListener('keypress', function(event) {
                        if (event.key === 'Enter') {
                            event.preventDefault();
                            sendGroupMessage(groupId);
                        }
                    });
                }

                // Grup mesajı gönderme fonksiyonu
                async function sendGroupMessage(groupId) {
                    const messageInput = document.getElementById('groupMessageInput');
                    const message = messageInput.value.trim();

                    if (!message) {
                        return; // Boş mesaj göndermeyi engelle
                    }

                    if (!groupId) {
                        console.error('Grup ID bulunamadı');
                        return;
                    }
                    
                    try {
                        // SignalR bağlantısını kontrol et
                        if (!signalRConnection || signalRConnection.state !== "Connected") {
                            console.error('SignalR bağlantısı yok');
                            alert('Bağlantı hatası. Lütfen sayfayı yenileyip tekrar deneyin.');
                            return;
                        }
                        
                        // Mesajı gönder
                        await signalRConnection.invoke("SendGroupMessage", groupId, message);
                        messageInput.value = ''; // Mesaj gönderildikten sonra input'u temizle
                        
                        // Scroll to bottom
                        const messagesDiv = document.getElementById('activeGroupMessages');
                        if (messagesDiv) {
                            messagesDiv.scrollTop = messagesDiv.scrollHeight;
                        }
                    } catch (err) {
                        console.error("Grup mesajı gönderilirken hata:", err);
                        alert("Mesaj gönderilemedi. Lütfen tekrar deneyin.");
                    }
                }
            });
        </script>
    </aside>
</div>

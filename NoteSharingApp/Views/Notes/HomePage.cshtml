@model List<Note>

<div class="flex h-screen bg-gray-100">
    <!-- Sol Panel: Sohbetler (1/4) -->
    <aside id="chatSidebar" class="w-1/4 bg-white shadow-lg p-4 m-2 rounded-lg overflow-y-auto">
        <div class="flex items-center justify-between mb-4">
            <h2 class="text-xl font-bold text-purple-400">Sohbetler</h2>
            <i class="fas fa-comments text-purple-400"></i>
        </div>
        <div class="space-y-4">
            <div class="bg-gray-50 p-4 rounded-lg">
                <h3 class="text-md font-semibold text-gray-800 mb-2">Kişisel Sohbetler</h3>
                <ul id="personalChatsList" class="space-y-2">
                        <li class="p-3 bg-purple-50 rounded-lg text-gray-500 text-center">
                        Sohbetler yükleniyor...
                        </li>
                </ul>
            </div>
            
            <div class="bg-gray-50 p-4 rounded-lg">
                <h3 class="text-md font-semibold text-gray-800 mb-2">Grup Sohbetleri</h3>
                <ul id="groupChatsList" class="space-y-2">
                    <li class="p-3 bg-purple-50 rounded-lg text-gray-500 text-center">
                        Henüz sohbet bulunmuyor
                    </li>
                </ul>
            </div>

            <div class="bg-gray-50 p-4 rounded-lg">
                <h3 class="text-md font-semibold text-gray-800 mb-2">Okul Grupları</h3>
                <ul id="schoolGroupsList" class="space-y-2">
                    <li class="p-3 bg-purple-50 rounded-lg text-gray-500 text-center">
                        Gruplar yükleniyor...
                    </li>
                </ul>
            </div>
        </div>
    </aside>

    <!-- Orta Panel -->
    <main class="w-1/2 p-6 m-2 bg-white shadow-lg rounded-lg overflow-y-auto">
        <!-- Ana sayfa içeriği (notlar) -->
        <div id="mainContent">
            <div class="flex items-center justify-between mb-6">
                <div>
                    <h1 class="text-2xl font-bold text-purple-500">Son Eklenen Notlar</h1>
                    <p class="text-sm text-gray-600/70 mt-1">Paylaşılan en güncel notlar</p>
                </div>
                <a asp-controller="Notes" 
                   asp-action="AddNote" 
                   class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg transition-all duration-300 flex items-center gap-2 shadow-md hover:shadow-lg transform hover:-translate-y-0.5">
                    <i class="fas fa-plus text-sm"></i>
                    <span>Yeni Not</span>
                </a>
            </div>

            <div class="space-y-4">
                @if (Model == null || !Model.Any())
                {
                    <div class="flex flex-col items-center justify-center p-8 bg-gray-50 rounded-lg border-2 border-dashed border-gray-200">
                        <i class="fas fa-notebook mb-3 text-3xl text-gray-400"></i>
                        <p class="text-gray-600 text-center">Henüz paylaşılmış not bulunmuyor.</p>
                        <p class="text-gray-400 text-sm mt-1">İlk notu siz paylaşın!</p>
                    </div>
                }
                else
                {
                    @foreach (var note in Model)
                    {
                        <div class="group bg-blue-50 hover:bg-white rounded-xl p-6 transition-all duration-300 border border-gray-100 hover:border-gray-200 hover:shadow-lg">
                            <div class="flex items-start justify-between mb-3">
                                <div class="flex-1">
                                    <h3 class="text-lg font-semibold text-gray-800 group-hover:text-gray-900">@note.Title</h3>
                                    <div class="flex items-center gap-3 mt-2">
                                        <span class="px-3 py-1 bg-gray-100/50 text-gray-600 rounded-full text-xs">
                                            <i class="fas fa-book-open mr-1"></i>
                                            Sayfa: @note.Page
                                        </span>
                                        <span class="px-3 py-1 bg-gray-100/50 text-gray-600 rounded-full text-xs">
                                            <i class="fas fa-user mr-1"></i>
                                            @note.OwnerUsername
                                        </span>
                                        <span class="px-3 py-1 bg-gray-100/50 text-gray-600 rounded-full text-xs">
                                            <i class="fas fa-folder mr-1"></i>
                                            @note.Category
                                        </span>
                                        <span class="px-3 py-1 bg-gray-100/50 text-gray-600 rounded-full text-xs">
                                            <i class="fas fa-clock mr-1"></i>
                                            @note.CreatedAt.ToString("dd.MM.yyyy HH:mm")
                                        </span>
                                    </div>
                                </div>
                                <div class="flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                                    <a href="@note.PdfFilePath" target="_blank" 
                                       class="p-2 text-gray-500 hover:text-purple-600 hover:bg-gray-100 rounded-lg transition-colors">
                                        <i class="fas fa-file-pdf"></i>
                                    </a>
                                    <button class="p-2 text-gray-500 hover:text-purple-600 hover:bg-gray-100 rounded-lg transition-colors">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="p-2 text-gray-500 hover:text-red-600 hover:bg-gray-100 rounded-lg transition-colors">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <p class="text-gray-600 mb-3 line-clamp-2 group-hover:line-clamp-none transition-all duration-300">
                                @note.Content
                            </p>

                            <div class="mt-4 pt-4 border-t border-gray-100">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center space-x-2">
                                        <button class="text-gray-500 hover:text-purple-600 text-sm flex items-center gap-1">
                                            <i class="fas fa-share-alt"></i>
                                            <span>Paylaş</span>
                                        </button>
                                    </div>
                                    <button class="text-gray-500 hover:text-purple-600 text-sm flex items-center gap-1">
                                        <i class="fas fa-download"></i>
                                        <span>PDF İndir</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Sohbet içeriği (başlangıçta gizli) -->
        <div id="chatContent" class="hidden h-full">
            <div class="bg-purple-100 text-purple-800 p-3 rounded-t-lg flex justify-between items-center mb-4">
                <h4 id="chatTargetUsername" class="font-bold text-lg"></h4>
                <button id="closePersonalChatBtn" class="text-purple-600 hover:text-purple-800 transition-colors">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <!-- Sohbet içeriği buraya yüklenecek -->
            <div id="messages" class="flex-1 overflow-y-auto p-4 space-y-4 mb-4"></div>
            <div class="flex items-center gap-2 mt-4">
                <input type="file" id="fileInput" class="hidden" />
                <label for="fileInput" class="cursor-pointer">
                    <i class="fas fa-paperclip text-gray-500 hover:text-purple-600"></i>
                </label>
                <input type="text" id="messageInput" placeholder="Mesajınızı yazın..." class="flex-1 p-2 border rounded-lg" />
                <button id="sendButton" class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg transition-all duration-300">
                    Gönder
                </button>
            </div>
        </div>

        <!-- Grup sohbet paneli (başlangıçta gizli) -->
        <div id="groupChatPanel" class="hidden h-full">
            <div class="bg-white rounded-lg shadow-lg p-4 mb-6 border-l-4 border-purple-500">
                <div class="bg-purple-100 text-purple-800 p-3 rounded-t-lg flex justify-between items-center">
                    <h4 id="selectedGroupName" class="font-bold text-lg"></h4>
                    <button onclick="closeGroupChat()" class="text-purple-600 hover:text-purple-800 transition-colors">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <div class="p-3">
                    <!-- Mesajlar bölümü -->
                    <div id="groupMessages" class="mb-4 max-h-[400px] overflow-y-auto">
                        <!-- Mesajlar buraya yüklenecek -->
                    </div>

                    <div class="welcome-message">
                        <div class="bg-blue-50 text-blue-700 p-4 rounded-lg mb-4 flex items-start">
                            <i class="fas fa-info-circle mr-3 mt-1 text-blue-500"></i>
                            <div>
                                <p class="font-semibold mb-1">Bu gruba katılarak:</p>
                                <ul class="list-disc pl-5 text-sm">
                                    <li>Grup üyeleriyle not paylaşabilirsiniz</li>
                                    <li>Ders materyallerine erişebilirsiniz</li>
                                    <li>Sorularınızı sorabilirsiniz</li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <div class="p-3 border-t border-gray-200 flex justify-center gap-4 mt-2">
                        <button id="joinGroupBtn" class="bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 flex items-center">
                            <i class="fas fa-sign-in-alt mr-2"></i>Gruba Katıl
                        </button>
                        <button id="cancelGroupBtn" class="bg-white hover:bg-gray-100 text-gray-700 border border-gray-300 font-semibold py-2 px-6 rounded-lg transition-all duration-300 hover:shadow-md flex items-center">
                            <i class="fas fa-times mr-2"></i>Vazgeç
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Aktif Grup Sohbet Paneli (başlangıçta gizli) -->
        <div id="activeGroupChatPanel" class="hidden h-full flex flex-col">
            <div class="bg-purple-100 text-purple-800 p-3 rounded-t-lg flex justify-between items-center">
                <h4 id="activeGroupName" class="font-bold text-lg"></h4>
                <button id="closeGroupChatBtn" class="text-purple-600 hover:text-purple-800 transition-colors">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div id="activeGroupMessages" class="flex-1 overflow-y-auto p-4 bg-gray-50">
                <!-- Mesajlar buraya yüklenecek -->
            </div>
            <div class="p-4 border-t bg-white">
                <div class="flex items-center gap-2">
                    <input type="text" id="groupMessageInput" placeholder="Mesajınızı yazın..." class="flex-1 p-2 border rounded-lg focus:ring-purple-400 focus:border-purple-400" />
                    <button id="sendGroupMessageBtn" class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg transition-all duration-300">
                        Gönder
                    </button>
                    <!-- İsteğe bağlı: Dosya yükleme butonu -->
                    <input type="file" id="groupFileInput" class="hidden" />
                    <label for="groupFileInput" class="cursor-pointer text-gray-500 hover:text-purple-600 p-2">
                        <i class="fas fa-paperclip"></i>
                    </label>
                </div>
            </div>
        </div>
    </main>

    <!-- Sağ Panel: Sohbet Başlat (1/4) -->
    <aside class="w-1/4 bg-white shadow-lg p-4 m-2 rounded-lg">
        <div class="flex items-center justify-between mb-4">
            <h2 class="text-xl font-bold text-purple-400">Yeni Sohbet</h2>
            <i class="fas fa-comments text-purple-400"></i>
        </div>

        <!-- Kişisel Sohbet -->
        <div class="space-y-3 mb-3">
            <h3 class="text-sm font-semibold text-gray-700">Kişisel Sohbet</h3>
            <div class="space-y-3">
                <form asp-action="AddChatDb" method="post" onsubmit="return handleChatSubmit(event)">
                    <div class="relative">
                        <input type="text"
                               name="userName"
                               id="userSearchInput"
                               class="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-purple-400 focus:border-purple-400 outline-none mb-3"
                               placeholder="Kullanıcı adı girin...">
                        <div id="userSuggestions"
                             class="absolute left-0 right-0 top-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-48 overflow-y-auto">
                        </div>
                    </div>
                    <button type="submit" class="w-full bg-purple-500 hover:bg-purple-600 text-white font-semibold p-3 rounded-lg transition-colors flex items-center justify-center gap-2">
                        <i class="fas fa-user-plus"></i>
                        <span>Kişisel Sohbet Başlat</span>
                    </button>
                </form>

                <!-- Chat Panel (Başlatılan sohbet burada görünecek) -->
                <div id="chatPanel" class="hidden mt-6">
                    <!-- Buraya Chat partial view'ı dinamik olarak ekleyeceğiz -->
                </div>
            </div>
        </div>

        <!-- Grup Ara -->
        <div class="space-y-3 mb-6">
            <h3 class="text-sm font-semibold text-gray-700">Grup Ara</h3>
            <div class="space-y-3">
                <div class="relative">
                    <input type="text"
                           id="schoolGroupSearchInput"
                           class="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-purple-400 focus:border-purple-400 outline-none"
                           placeholder="Bölüm adı veya okul adı girin...">
                    <div id="schoolGroupSuggestions"
                         class="absolute left-0 right-0 top-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-48 overflow-y-auto hidden">
                    </div>
                </div>
                
                <input type="hidden" id="selectedGroupId">
                
                <button id="searchSchoolGroupsBtn" class="w-full bg-purple-500 hover:bg-purple-600 text-white font-semibold p-3 rounded-lg transition-colors flex items-center justify-center gap-2">
                    <i class="fas fa-school"></i>
                    <span>Okul/Bölüm Ara</span>
                </button>
            </div>
        </div>

        <!-- Grup Oluştur -->
        <div class="space-y-3 mb-6">
            <h3 class="text-sm font-semibold text-gray-700">Yeni Grup</h3>
            <div class="space-y-3">
                <input type="text"
                       id="groupNameInput"
                       class="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-purple-400 focus:border-purple-400 outline-none"
                       placeholder="Grup adı girin...">
                <button onclick="createGroup()" class="w-full bg-purple-500 hover:bg-purple-600 text-white font-semibold p-3 rounded-lg transition-colors flex items-center justify-center gap-2">
                    <i class="fas fa-users"></i>
                    <span>Grup Oluştur</span>
                </button>
            </div>
        </div>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
        <script>
            // SignalR bağlantı değişkeni
            let signalRConnection = null;
            let currentActiveGroupId = null;

            // Kullanıcı renkleri için nesne ve renk paleti
            let userColors = {};
            const chatColorPalette = [
                { bg: 'bg-blue-200', text: 'text-blue-800', textLight: 'text-blue-600' },
                { bg: 'bg-green-200', text: 'text-green-800', textLight: 'text-green-600' },
                { bg: 'bg-rose-200', text: 'text-rose-800', textLight: 'text-rose-600' },
                { bg: 'bg-amber-200', text: 'text-amber-800', textLight: 'text-amber-600' },
                { bg: 'bg-violet-200', text: 'text-violet-800', textLight: 'text-violet-600' },
                { bg: 'bg-teal-200', text: 'text-teal-800', textLight: 'text-teal-600' },
                { bg: 'bg-fuchsia-200', text: 'text-fuchsia-800', textLight: 'text-fuchsia-600' },
                { bg: 'bg-sky-200', text: 'text-sky-800', textLight: 'text-sky-600' },
                { bg: 'bg-lime-200', text: 'text-lime-800', textLight: 'text-lime-600' },
                { bg: 'bg-purple-200', text: 'text-purple-800', textLight: 'text-purple-600' } // Default/fallback
            ];
            let nextColorIndex = 0;

            // Kullanıcıya renk atayan fonksiyon
            function getUserColor(username) {
                if (!userColors[username]) {
                    userColors[username] = chatColorPalette[nextColorIndex % chatColorPalette.length];
                    nextColorIndex++;
                }
                return userColors[username];
            }

            document.addEventListener('DOMContentLoaded', function () {
                let typingTimer;
                const doneTypingInterval = 300;

                // Sayfa yüklendiğinde sohbet listesini getir
                loadPersonalChats();

                // Kullanıcı arama input olayı
                const userSearchInput = document.getElementById('userSearchInput');
                const suggestionsDiv = document.getElementById('userSuggestions');

                userSearchInput.addEventListener('input', function() {
                    clearTimeout(typingTimer);
                    if (userSearchInput.value) {
                        typingTimer = setTimeout(function() {
                            searchUsers(userSearchInput.value);
                        }, doneTypingInterval);
                    } else {
                        suggestionsDiv.classList.add('hidden');
                    }
                });

                // Kullanıcı arama fonksiyonu
                function searchUsers(searchTerm) {
                    fetch(`/Chat/SearchUsers?searchTerm=${encodeURIComponent(searchTerm)}`)
                        .then(response => response.json())
                        .then(users => {
                            const suggestionsDiv = document.getElementById('userSuggestions');
                            suggestionsDiv.innerHTML = '';

                            if (users && users.length > 0) {
                                users.forEach(user => {
                                    const suggestion = document.createElement('div');
                                    suggestion.className = 'p-3 hover:bg-purple-50 cursor-pointer transition-colors border-b border-gray-100 last:border-0';
                                    suggestion.innerHTML = `
                                        <div class="flex items-center gap-2">
                                            <i class="fas fa-user-circle text-purple-400"></i>
                                            <span class="text-gray-700">${user}</span>
                                        </div>
                                    `;
                                    suggestion.onclick = () => {
                                        userSearchInput.value = user;
                                        suggestionsDiv.classList.add('hidden');
                                    };
                                    suggestionsDiv.appendChild(suggestion);
                                });
                                suggestionsDiv.classList.remove('hidden');
                            } else {
                                const noResult = document.createElement('div');
                                noResult.className = 'p-3 text-center text-gray-500';
                                noResult.textContent = 'Sonuç bulunamadı';
                                suggestionsDiv.appendChild(noResult);
                                suggestionsDiv.classList.remove('hidden');
                            }
                        })
                        .catch(error => {
                            const suggestionsDiv = document.getElementById('userSuggestions');
                            suggestionsDiv.innerHTML = '<div class="p-3 text-center text-red-500">Bir hata oluştu</div>';
                            suggestionsDiv.classList.remove('hidden');
                        });
                }

                // Tıklama olayları
                document.addEventListener('click', function(e) {
                    if (!userSearchInput.contains(e.target) && !suggestionsDiv.contains(e.target)) {
                        suggestionsDiv.classList.add('hidden');
                    }
                });

                // Form submit işlemi
                window.handleChatSubmit = function(event) {
                    event.preventDefault();
                    const userName = userSearchInput.value.trim();
                    
                    if (!userName) {
                        alert('Lütfen bir kullanıcı adı girin.');
                        return false;
                    }

                    fetch('/Chat/StartPersonalChat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ username: userName })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            loadChat(data.targetUsername);
                            updatePersonalChatsList(data.targetUsername);
                            userSearchInput.value = '';
                            suggestionsDiv.classList.add('hidden');
                        } else {
                            alert(data.message || 'Sohbet başlatılırken bir hata oluştu.');
                        }
                    })
                    .catch(error => {
                        alert('Bir hata oluştu. Lütfen tekrar deneyin.');
                    });

                    return false;
                };

                // Kişisel sohbetleri yükleme fonksiyonu
                function loadPersonalChats() {
                    fetch('/Chat/GetChatUsersForHomePage')
                        .then(response => response.json())
                        .then(chatUsers => {
                            const personalChatsList = document.getElementById('personalChatsList');
                            personalChatsList.innerHTML = '';

                            if (chatUsers && chatUsers.length > 0) {
                                chatUsers.forEach(username => {
                                    const chatItem = document.createElement('li');
                                    chatItem.className = 'p-3 bg-purple-50 rounded-lg hover:bg-purple-100 transition-colors cursor-pointer flex items-center gap-2';
                                    chatItem.onclick = () => loadChat(username);
                                    chatItem.innerHTML = `
                                        <i class="fas fa-user-circle text-purple-400"></i>
                                        <span>${username}</span>
                                    `;
                                    personalChatsList.appendChild(chatItem);
                                });
                            } else {
                                const noChatsItem = document.createElement('li');
                                noChatsItem.className = 'p-3 bg-purple-50 rounded-lg text-gray-500 text-center';
                                noChatsItem.textContent = 'Henüz sohbet bulunmuyor';
                                personalChatsList.appendChild(noChatsItem);
                            }
                        })
                        .catch(error => {
                            console.error('Sohbet listesi yüklenirken hata oluştu:', error);
                            const personalChatsList = document.getElementById('personalChatsList');
                            personalChatsList.innerHTML = '<li class="p-3 bg-purple-50 rounded-lg text-red-500 text-center">Sohbet listesi yüklenemedi</li>';
                        });
                }

                // Sohbet yükleme
                window.loadChat = function(username) {
                    fetch(`/Chat/ChatView?targetUsername=${encodeURIComponent(username)}`)
                        .then(response => response.text())
                        .then(html => {
                            const mainContent = document.getElementById('mainContent');
                            const chatContent = document.getElementById('chatContent');
                            const chatHeader = document.createElement('div');
                            chatHeader.className = 'bg-purple-100 text-purple-800 p-3 rounded-t-lg flex justify-between items-center mb-4';
                            chatHeader.innerHTML = `
                                <div class="flex items-center gap-3">
                                    <div class="w-10 h-10 rounded-full bg-purple-200 flex items-center justify-center">
                                        <i class="fas fa-user text-purple-500 text-lg"></i>
                                    </div>
                                    <div>
                                        <h4 class="font-bold text-lg">${username}</h4>
                                        <span class="text-sm text-purple-600">Çevrimiçi</span>
                                    </div>
                                </div>
                                <button id="closePersonalChatBtn" class="text-purple-600 hover:text-purple-800 transition-colors">
                                    <i class="fas fa-times"></i>
                                </button>
                            `;

                            mainContent.classList.add('hidden');
                            chatContent.innerHTML = '';
                            chatContent.appendChild(chatHeader);

                            // HTML içeriğinden gereksiz kullanıcı adını kaldır
                            const tempDiv = document.createElement('div');
                            tempDiv.innerHTML = html;
                            const userInfoDiv = tempDiv.querySelector('.flex.items-center');
                            if (userInfoDiv) {
                                userInfoDiv.remove();
                            }
                            
                            chatContent.insertAdjacentHTML('beforeend', tempDiv.innerHTML);
                            chatContent.classList.remove('hidden');

                            // Çarpı butonuna tıklama olayını ekle
                            document.getElementById('closePersonalChatBtn').addEventListener('click', function() {
                                mainContent.classList.remove('hidden');
                                chatContent.classList.add('hidden');
                                chatContent.innerHTML = '';
                                
                                // SignalR bağlantısını kapat
                                if (signalRConnection && signalRConnection.state === "Connected") {
                                    signalRConnection.stop().catch(function (err) {
                                        console.error('SignalR bağlantısı kapatılırken hata:', err);
                                    });
                                }
                            });

                            // SignalR bağlantısını başlat
                            startSignalRConnection(username);
                        })
                        .catch(error => {
                            alert('Sohbet yüklenirken bir hata oluştu.');
                        });
                };

                // SignalR bağlantısını başlat
                function startSignalRConnection(targetUsername) {
                    const connection = new signalR.HubConnectionBuilder()
                        .withUrl("/chatHub")
                        .withAutomaticReconnect()
                        .build();

                    connection.on("ReceiveMessage", (senderUsername, message) => {
                        const messagesDiv = document.getElementById('messages');
                        const messageDiv = document.createElement('div');
                        const isCurrentUser = senderUsername === '@User.Identity.Name';
                        
                        messageDiv.className = `flex ${isCurrentUser ? 'justify-end' : 'justify-start'} mb-4`;
                        messageDiv.innerHTML = `
                            <div class="${isCurrentUser ? 'bg-purple-500 text-white' : 'bg-white text-gray-800'} rounded-lg p-3 max-w-[70%] shadow-sm">
                                <p class="break-words">${message}</p>
                                <span class="text-xs ${isCurrentUser ? 'text-purple-100' : 'text-gray-500'} block mt-1">
                                    ${new Date().toLocaleTimeString()}
                                </span>
                            </div>
                        `;
                        
                        messagesDiv.appendChild(messageDiv);
                        messagesDiv.scrollTop = messagesDiv.scrollHeight;
                    });

                    connection.start()
                        .then(() => {
                            connection.invoke("JoinChat", '@User.Identity.Name');

                            // Mesaj gönderme fonksiyonunu global scope'a ekle
                            window.sendMessage = async function() {
                                const messageInput = document.getElementById('messageInput');
                                const message = messageInput.value.trim();
                                
                                if (message) {
                                    connection.invoke("SendMessage", '@User.Identity.Name', targetUsername, message);
                                        messageInput.value = '';
                                }
                            };

                            // Enter tuşu ile mesaj gönderme
                            const messageInput = document.getElementById('messageInput');
                            if (messageInput) {
                                messageInput.addEventListener('keypress', function(event) {
                                    if (event.key === 'Enter') {
                                        event.preventDefault();
                                        sendMessage();
                                    }
                                });
                            }
                        })
                        .catch(err => {
                            alert("SignalR Connection Error");
                        });
                }

                // Sohbet listesi güncelleme
                window.updatePersonalChatsList = function(newUsername) {
                    const personalChatsList = document.getElementById('personalChatsList');
                    const existingChats = personalChatsList.querySelectorAll('li');

                    if (existingChats.length === 1 && existingChats[0].classList.contains('text-center')) {
                        personalChatsList.innerHTML = '';
                    }

                    const existingChat = Array.from(existingChats).find(chat =>
                        chat.textContent.trim() === newUsername
                    );

                    if (!existingChat) {
                        const newChatItem = document.createElement('li');
                        newChatItem.className = 'p-3 bg-purple-50 rounded-lg hover:bg-purple-100 transition-colors cursor-pointer flex items-center gap-2';
                        newChatItem.onclick = () => loadChat(newUsername);
                        newChatItem.innerHTML = `
                            <i class="fas fa-user-circle text-purple-400"></i>
                            <span>${newUsername}</span>
                        `;
                        personalChatsList.insertBefore(newChatItem, personalChatsList.firstChild);
                    }
                };

                // Çarpı butonuna tıklama olayını ekle
                document.getElementById('closeGroupChatBtn').addEventListener('click', function() {
                    const mainContent = document.getElementById('mainContent');
                    const groupChatPanel = document.getElementById('groupChatPanel');
                    const activeGroupChatPanel = document.getElementById('activeGroupChatPanel');
                    const chatContent = document.getElementById('chatContent');
                    
                    // Tüm sohbet panellerini gizle
                    groupChatPanel.classList.add('hidden');
                    activeGroupChatPanel.classList.add('hidden');
                    chatContent.classList.add('hidden');
                    
                    // Ana sayfayı göster
                    mainContent.classList.remove('hidden');
                    
                    // Aktif grup ID'sini temizle
                    currentActiveGroupId = null;
                    
                    // Mesaj içeriğini temizle
                    document.getElementById('activeGroupMessages').innerHTML = '';
                    
                    // SignalR bağlantısını gruptan çıkar
                    if (signalRConnection && signalRConnection.state === "Connected") {
                        signalRConnection.invoke("LeaveGroup", currentActiveGroupId).catch(function (err) {
                            console.error(err);
                        });
                    }
                });

                // Kişisel sohbet kapatma butonu
                document.getElementById('closePersonalChatBtn').addEventListener('click', function() {
                    const mainContent = document.getElementById('mainContent');
                    const chatContent = document.getElementById('chatContent');
                    
                    // Sohbet panelini gizle
                    chatContent.classList.add('hidden');
                    
                    // Ana sayfayı göster
                    mainContent.classList.remove('hidden');
                    
                    // Mesaj içeriğini temizle
                    document.getElementById('messages').innerHTML = '';
                    document.getElementById('messageInput').value = '';
                    
                    // SignalR bağlantısını kapat (isteğe bağlı)
                    if (signalRConnection && signalRConnection.state === "Connected") {
                        signalRConnection.stop().catch(function (err) {
                            console.error('SignalR bağlantısı kapatılırken hata:', err);
                        });
                    }
                });

                function searchSchoolGroups(searchTerm) {
                    fetch(`/Chat/GetGroup?searchTerm=${encodeURIComponent(searchTerm)}`)
                        .then(response => response.json())
                        .then(groups => {
                            const suggestionsDiv = document.getElementById('schoolGroupSuggestions');
                            suggestionsDiv.innerHTML = '';

                            if (groups && groups.length > 0) {
                                groups.forEach(group => {
                                    const suggestion = document.createElement('div');
                                    suggestion.className = 'p-3 hover:bg-purple-50 cursor-pointer transition-colors border-b border-gray-100 last:border-0';
                                    suggestion.innerHTML = `
                                        <div class="flex flex-col gap-1">
                                            <div class="flex items-center gap-2">
                                                <i class="fas fa-users text-purple-400"></i>
                                                <span class="text-gray-700 font-semibold">${group.groupName}</span>
                                            </div>
                                            <div class="flex items-center gap-2 text-sm text-gray-500">
                                                <i class="fas fa-school text-purple-300"></i>
                                                <span>${group.schoolName}</span>
                                            </div>
                                            <div class="flex items-center gap-2 text-sm text-gray-500">
                                                <i class="fas fa-graduation-cap text-purple-300"></i>
                                                <span>${group.departmentName}</span>
                                            </div>
                                        </div>
                                    `;
                                    suggestion.onclick = () => {
                                        document.getElementById('schoolGroupSearchInput').value = group.groupName;
                                        document.getElementById('selectedGroupId').value = group.id;
                                        suggestionsDiv.classList.add('hidden');
                                    };
                                    suggestionsDiv.appendChild(suggestion);
                                });
                                suggestionsDiv.classList.remove('hidden');
                            } else {
                                const noResult = document.createElement('div');
                                noResult.className = 'p-3 text-center text-gray-500';
                                noResult.textContent = 'Sonuç bulunamadı';
                                suggestionsDiv.appendChild(noResult);
                                suggestionsDiv.classList.remove('hidden');
                            }
                        })
                        .catch(error => {
                            const suggestionsDiv = document.getElementById('schoolGroupSuggestions');
                            suggestionsDiv.innerHTML = '<div class="p-3 text-center text-red-500">Bir hata oluştu</div>';
                            suggestionsDiv.classList.remove('hidden');
                        });
                }

                // Okul/Bölüm arama input olayı
                document.getElementById('schoolGroupSearchInput').addEventListener('input', function() {
                    const searchTerm = this.value.trim();
                    const suggestionsDiv = document.getElementById('schoolGroupSuggestions');

                    if (searchTerm.length < 2) {
                        suggestionsDiv.classList.add('hidden');
                        return;
                    }

                    clearTimeout(typingTimer);
                    typingTimer = setTimeout(() => {
                        searchSchoolGroups(searchTerm);
                    }, doneTypingInterval);
                });

                // Tıklama olayları için event listener
                document.addEventListener('click', function(e) {
                    const suggestionsDiv = document.getElementById('schoolGroupSuggestions');
                    const searchInput = document.getElementById('schoolGroupSearchInput');
                    
                    if (!searchInput.contains(e.target) && !suggestionsDiv.contains(e.target)) {
                        suggestionsDiv.classList.add('hidden');
                    }
                });

                function createGroup() {
                    const groupName = document.getElementById('groupNameInput').value.trim();
                    if (!groupName) {
                        alert('Lütfen bir grup adı girin.');
                        return;
                    }

                    fetch('/Notes/CreateGroup', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ groupName })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Grup başarıyla oluşturuldu!');
                        } else {
                            alert('Grup oluşturulamadı: ' + data.message);
                        }
                    })
                    .catch(error => {
                        alert('Bir hata oluştu. Lütfen tekrar deneyin.');
                    });
                }

                // Arama butonu için event listener
                if (document.getElementById('searchSchoolGroupsBtn')) {
                    document.getElementById('searchSchoolGroupsBtn').addEventListener('click', function() {
                        const searchTerm = document.getElementById('schoolGroupSearchInput').value;
                        const selectedGroupId = document.getElementById('selectedGroupId').value;
                        
                        if (!searchTerm) {
                            alert('Lütfen bir arama terimi girin.');
                            return;
                        }
                        
                        if (!selectedGroupId) {
                            alert('Lütfen önce önerilen gruplardan birini seçin.');
                            return;
                        }
                        
                        fetch(`/Chat/GetGroup?searchTerm=${encodeURIComponent(searchTerm)}`)
                            .then(response => response.json())
                            .then(groups => {
                                if (groups && groups.length > 0) {
                                    const group = groups.find(g => g.id === selectedGroupId);
                                    
                                    if (group) {
                                        // Grup detaylarını orta panelde göster
                                        const groupChatPanel = document.getElementById('groupChatPanel');
                                        const mainContent = document.getElementById('mainContent');
                                        const selectedGroupNameElement = document.getElementById('selectedGroupName');
                                        
                                        // Seçilen grubun adını panele aktar
                                        selectedGroupNameElement.textContent = group.groupName;
                                        document.getElementById('selectedGroupId').value = group.id;
                                        
                                        // Ana içeriği gizle ve grup panelini göster
                                        mainContent.classList.add('hidden');
                                        groupChatPanel.classList.remove('hidden');
                                    }
                                } else {
                                    alert('Arama kriterlerine uygun grup bulunamadı.');
                                }
                            })
                            .catch(error => {
                                alert('Grup araması sırasında bir hata oluştu.');
                            });
                    });
                }
                
                // Grup sohbet paneli için JavaScript
                // Grup önerilerine tıklama olayı
                const schoolGroupSuggestions = document.getElementById('schoolGroupSuggestions');
                if (schoolGroupSuggestions) {
                    schoolGroupSuggestions.addEventListener('click', function(e) {
                        // Öneriye tıklandığında
                        const suggestionItem = e.target.closest('div[class*="hover:bg-purple-50"]');
                        if (suggestionItem) {
                            // Grup adını al
                            const groupNameElement = suggestionItem.querySelector('.font-semibold');
                            if (groupNameElement) {
                                const groupName = groupNameElement.textContent;
                                
                                // Ana içeriği gizle ve grup panelini göster
                                const mainContent = document.getElementById('mainContent');
                                const chatContent = document.getElementById('chatContent');
                                const groupChatPanel = document.getElementById('groupChatPanel');
                                
                                mainContent.classList.add('hidden');
                                chatContent.classList.add('hidden');
                                groupChatPanel.classList.remove('hidden');
                                
                                // Grup adını panele yaz
                                document.getElementById('selectedGroupName').textContent = groupName;
                            }
                        }
                    });
                }
                
                // Grup butonları
                const joinGroupBtn = document.getElementById('joinGroupBtn');
                const cancelGroupBtn = document.getElementById('cancelGroupBtn');
                
                if (joinGroupBtn) {
                    joinGroupBtn.addEventListener('click', function() {
                        // Seçilen gruba katıl
                        const selectedGroupId = document.getElementById('selectedGroupId').value;
                        const groupName = document.getElementById('selectedGroupName').textContent; // Grup adını al
                        
                        if (!selectedGroupId) {
                            alert('Lütfen bir grup seçin.');
                            return;
                        }
                        
                        fetch('/Chat/JoinSchoolGroup', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                            },
                            body: `groupId=${encodeURIComponent(selectedGroupId)}`
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Başarılı olursa butonu güncelle
                                joinGroupBtn.textContent = 'Gruba Katıldınız';
                                joinGroupBtn.disabled = true;
                                joinGroupBtn.classList.remove('bg-green-500', 'hover:bg-green-600');
                                joinGroupBtn.classList.add('bg-gray-400');
                                joinGroupBtn.classList.remove('hover:scale-105');
                                
                                // Sol paneldeki grup listesine yeni grubu ekle
                                addGroupToSidebar(data.groupId, data.groupName);
                                
                                // Grup adını tıklanabilir yap ve click event'i ekle
                                const groupNameElement = document.getElementById('selectedGroupName');
                                groupNameElement.classList.add('cursor-pointer', 'hover:underline');
                                groupNameElement.onclick = () => displayGroupChat(data.groupId, data.groupName);
                                
                                // "Vazgeç" butonunu gizle veya kaldır (isteğe bağlı)
                                // cancelGroupBtn.classList.add('hidden');

                            } else {
                                alert('Hata: ' + data.message);
                            }
                        })
                        .catch(error => {
                            alert('Bir hata oluştu. Lütfen tekrar deneyin.');
                        });
                    });
                }
                
                if (cancelGroupBtn) {
                    cancelGroupBtn.addEventListener('click', function() {
                        // Grup seçimini iptal et
                        document.getElementById('schoolGroupSearchInput').value = '';
                        document.getElementById('selectedGroupId').value = '';
                        
                        // Ana içeriği göster, grup panelini gizle
                        const mainContent = document.getElementById('mainContent');
                        const groupChatPanel = document.getElementById('groupChatPanel');
                        
                        groupChatPanel.classList.add('hidden');
                        mainContent.classList.remove('hidden');
                    });
                }

                // Dosya yükleme ve gönderme işlemi
                async function uploadAndSendFile(file) {
                    if (!file) return;

                    uploadProgress.classList.remove('hidden');
                    const formData = new FormData();
                    formData.append('file', file);

                    try {
                        const response = await fetch('/Chat/UploadChatFile', {
                            method: 'POST',
                            body: formData
                        });

                        const result = await response.json();
                        if (result.success) {
                            if (connection.state === "Connected") {
                                await connection.invoke("SendFile", currentUsername, targetUsername, result.fileName, result.fileUrl);
                                setTimeout(() => {
                                    cancelFileUpload();
                                }, 1000);
                            } else {
                                alert("Bağlantı hatası. Lütfen sayfayı yenileyin.");
                                cancelFileUpload();
                            }
                        } else {
                            alert(result.message || "Dosya yüklenemedi.");
                            cancelFileUpload();
                        }
                    } catch (error) {
                        console.error("Dosya yükleme hatası:", error);
                        alert("Dosya yüklenirken bir hata oluştu.");
                        cancelFileUpload();
                    }
                }

                // Yeni grup eklemek için fonksiyon
                function addGroupToSidebar(groupId, groupName) {
                    const schoolGroupsList = document.getElementById('schoolGroupsList');
                    
                    // Eğer "Henüz okul grubu bulunmuyor" mesajı varsa, onu kaldır
                    if (schoolGroupsList.innerHTML.includes('Henüz okul grubu bulunmuyor')) {
                        schoolGroupsList.innerHTML = '';
                    }
                    
                    // Grup zaten eklenmiş mi kontrol et
                    const existingGroup = Array.from(schoolGroupsList.querySelectorAll('li')).find(group => 
                        group.querySelector('span') && group.querySelector('span').textContent === groupName
                    );
                    
                    if (!existingGroup) {
                        const groupItem = document.createElement('li');
                        groupItem.className = 'p-3 bg-purple-50 rounded-lg hover:bg-purple-100 transition-colors cursor-pointer flex items-center gap-2';
                        groupItem.onclick = () => loadGroupChat(groupId, groupName);
                        groupItem.innerHTML = `
                            <i class="fas fa-users text-purple-400"></i>
                            <span>${groupName}</span>
                        `;
                        schoolGroupsList.appendChild(groupItem);
                    }
                }

                // Grup sohbetini yüklemek için GÜNCELLENMİŞ fonksiyon (Sol menüden tıklanınca çalışır)
                function loadGroupChat(groupId, groupName) {
                    // Bu fonksiyon artık doğrudan displayGroupChat'i çağıracak
                    displayGroupChat(groupId, groupName);
                }

                // Grup mesajlarını yüklemek için GÜNCELLENMİŞ fonksiyon
                function loadGroupMessages(groupId) {
                    fetch(`/Chat/GetGroupMessages?groupId=${encodeURIComponent(groupId)}`)
                        .then(response => response.json())
                        .then(messages => {
                            const messagesDiv = document.getElementById('activeGroupMessages');
                            messagesDiv.innerHTML = '';

                            if (messages && messages.length > 0) {
                                messages.forEach(message => {
                                    const isCurrentUser = message.senderUsername === '@User.Identity.Name';
                                    const userColor = getUserColor(message.senderUsername);
                                    const messageDiv = document.createElement('div');
                                    messageDiv.className = `w-full flex flex-col ${isCurrentUser ? 'items-end' : 'items-start'} mb-3`;

                                    // Baloncuk ve içerik konteyneri
                                    const bubbleContainer = document.createElement('div');
                                    bubbleContainer.className = `max-w-[75%]`;

                                    // Mesaj Baloncuğu
                                    const messageBubble = document.createElement('div');
                                    let bubbleBaseClasses = 'rounded-lg py-2 px-3 shadow-sm inline-block';
                                    messageBubble.className = `${bubbleBaseClasses} ${userColor.bg} ${userColor.text}`;

                                    // Gönderen Adı (Mesaj balonunun içinde)
                                    const senderNameSpan = document.createElement('div');
                                    senderNameSpan.className = `text-xs font-semibold mb-1 ${userColor.textLight}`; 
                                    senderNameSpan.textContent = message.senderUsername;
                                    messageBubble.appendChild(senderNameSpan);

                                    // Mesaj İçeriği
                                    const messageContent = document.createElement('p');
                                    messageContent.className = "break-words text-sm";
                                    messageContent.textContent = message.content;
                                    messageBubble.appendChild(messageContent);

                                    // Zaman Damgası
                                    const timestampSpan = document.createElement('span');
                                    timestampSpan.className = `text-xs ${userColor.textLight} block mt-1 text-right opacity-75`;
                                    timestampSpan.textContent = new Date(message.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                                    messageBubble.appendChild(timestampSpan);

                                    // Baloncuğu, baloncuk konteynerine ekle
                                    bubbleContainer.appendChild(messageBubble);
                                    
                                    // Baloncuk konteynerini ana konteynere ekle
                                    messageDiv.appendChild(bubbleContainer);
                                    messagesDiv.appendChild(messageDiv);
                                });
                                messagesDiv.scrollTop = messagesDiv.scrollHeight;
                            } else {
                                const noMessages = document.createElement('div');
                                noMessages.className = 'text-center text-gray-500 p-4';
                                noMessages.textContent = 'Henüz mesaj yok.';
                                messagesDiv.appendChild(noMessages);
                            }
                        })
                        .catch(error => {
                            console.error('Grup mesajları yüklenirken hata oluştu:', error);
                            const messagesDiv = document.getElementById('activeGroupMessages');
                            messagesDiv.innerHTML = '<div class="text-center text-red-500 p-4">Mesajlar yüklenemedi.</div>';
                        });
                }

                // YENİ: Aktif grup sohbet panelini gösteren fonksiyon
                async function displayGroupChat(groupId, groupName) {
                    const mainContent = document.getElementById('mainContent');
                    const chatContent = document.getElementById('chatContent');
                    const groupChatPanel = document.getElementById('groupChatPanel');
                    const activeGroupChatPanel = document.getElementById('activeGroupChatPanel');
                    
                    // Diğer panelleri gizle
                    mainContent.classList.add('hidden');
                    chatContent.classList.add('hidden');
                    groupChatPanel.classList.add('hidden');
                    
                    // Aktif grup panelini göster
                    activeGroupChatPanel.classList.remove('hidden');
                    
                    // Grup adını yaz
                    document.getElementById('activeGroupName').textContent = groupName;
                    currentActiveGroupId = groupId; // Aktif grup ID'sini sakla
                    
                    // Mesajları yükle
                    loadGroupMessages(groupId);
                    
                    // SignalR bağlantısını kur ve gruba katıl
                    await ensureSignalRConnection();
                    if (signalRConnection && signalRConnection.state === "Connected") {
                        try {
                            await signalRConnection.invoke("JoinGroup", groupId);
                        } catch (err) {
                            console.error(`Failed to join group ${groupId}:`, err);
                            alert("Grup sohbetine bağlanırken bir hata oluştu.");
                            closeGroupChat(); // Hata durumunda paneli kapat
                            return;
                        }
                    }
                    
                    // Grup mesajı gönderme butonunu ayarla
                    const sendBtn = document.getElementById('sendGroupMessageBtn');
                    const messageInput = document.getElementById('groupMessageInput');
                    
                    // Önceki event listener'ları temizle (varsa)
                    sendBtn.replaceWith(sendBtn.cloneNode(true)); 
                    messageInput.replaceWith(messageInput.cloneNode(true));
                    
                    // Yeni event listener'ları ekle
                    document.getElementById('sendGroupMessageBtn').onclick = () => sendGroupMessage(groupId);
                    document.getElementById('groupMessageInput').addEventListener('keypress', function(event) {
                        if (event.key === 'Enter') {
                            event.preventDefault();
                            sendGroupMessage(groupId);
                        }
                    });
                }

                // YENİ: Grup mesajı gönderme fonksiyonu
                async function sendGroupMessage(groupId) {
                    const messageInput = document.getElementById('groupMessageInput');
                    const message = messageInput.value.trim();

                    if (message && groupId && signalRConnection && signalRConnection.state === "Connected") {
                        try {
                            await signalRConnection.invoke("SendGroupMessage", groupId, message);
                            messageInput.value = ''; // Mesaj gönderildikten sonra input'u temizle
                        } catch (err) {
                            console.error("Error sending group message:", err);
                            alert("Grup mesajı gönderilemedi.");
                        }
                    }
                }

                // YENİ: SignalR bağlantısını başlatan veya mevcut bağlantıyı döndüren fonksiyon
                async function ensureSignalRConnection() {
                    if (!signalRConnection || signalRConnection.state !== "Connected") {
                        signalRConnection = new signalR.HubConnectionBuilder()
                            .withUrl("/chatHub")
                            .withAutomaticReconnect()
                            .build();

                        // Grup mesajlarını alma handler'ı
                        signalRConnection.on("ReceiveGroupMessage", (receivedGroupId, senderUsername, message, createdAt) => {
                            // Sadece aktif olan grubun mesajlarını göster
                            if (receivedGroupId === currentActiveGroupId) {
                                appendGroupMessage(senderUsername, message, createdAt);
                            }
                            // TODO: İsteğe bağlı olarak aktif olmayan gruplar için bildirim gösterilebilir
                        });
                        
                        // Kişisel mesajları alma handler'ı (mevcut)
                        signalRConnection.on("ReceiveMessage", (senderUsername, message) => {
                           // Kişisel sohbet arayüzü aktifse mesajı göster
                           const personalChatPanel = document.getElementById('chatContent');
                           if (!personalChatPanel.classList.contains('hidden')) {
                                const targetUsername = document.getElementById('chatTargetUsername')?.value;
                                // Doğru kişisel sohbet açıksa mesajı ekle
                                if(targetUsername && (senderUsername === targetUsername || senderUsername === '@User.Identity.Name')) {
                                     appendPersonalMessage(senderUsername, message);
                                } 
                           }
                        });

                        // Diğer SignalR event handler'ları (ReceiveFile vs.) buraya eklenebilir

                        try {
                            await signalRConnection.start();
                            console.log("SignalR Connected.");
                            // Genel kanala katıl (varsa)
                             await signalRConnection.invoke("JoinChat", '@User.Identity.Name');
                        } catch (err) {
                            console.error('SignalR Connection Error: ', err);
                            alert("Sohbet sunucusuna bağlanılamadı.");
                            signalRConnection = null;
                        }
                    }
                }

                // YENİ: Grup mesajını arayüze ekleyen - SORUN GİDERME VERSİYONU
                function appendGroupMessage(senderUsername, message, createdAt) {
                    console.log(`appendGroupMessage called: sender=${senderUsername}, currentUser='@User.Identity.Name'`);
                    
                    const messagesDiv = document.getElementById('activeGroupMessages');
                    if (!messagesDiv) {
                        console.error('#activeGroupMessages element not found!');
                        return; 
                    }

                    const currentUsername = '@User.Identity.Name';
                    const isCurrentUser = senderUsername === currentUsername;
                    const userColor = getUserColor(senderUsername);
                    
                    // Ana mesaj konteyneri (hizalama için)
                    const messageContainer = document.createElement('div');
                    messageContainer.className = `w-full flex flex-col ${isCurrentUser ? 'items-end' : 'items-start'} mb-3`;

                    // Baloncuk ve içerik konteyneri
                    const bubbleContainer = document.createElement('div');
                    bubbleContainer.className = `max-w-[75%]`;

                    // Mesaj Baloncuğu
                    const messageBubble = document.createElement('div');
                    let bubbleBaseClasses = 'rounded-lg py-2 px-3 shadow-sm inline-block';
                    
                    messageBubble.className = `${bubbleBaseClasses} ${userColor.bg} ${userColor.text}`;

                    // Gönderen Adı (Mesaj balonunun içinde)
                    const senderNameSpan = document.createElement('div');
                    senderNameSpan.className = `text-xs font-semibold mb-1 ${userColor.textLight}`; 
                    senderNameSpan.textContent = senderUsername;
                    messageBubble.appendChild(senderNameSpan);

                    // Mesaj İçeriği
                    const messageContent = document.createElement('p');
                    messageContent.className = "break-words text-sm";
                    messageContent.textContent = message;
                    messageBubble.appendChild(messageContent);

                    // Zaman Damgası
                    const timestampSpan = document.createElement('span');
                    timestampSpan.className = `text-xs ${userColor.textLight} block mt-1 text-right opacity-75`;
                    timestampSpan.textContent = new Date(createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                    messageBubble.appendChild(timestampSpan);

                    // Baloncuğu, baloncuk konteynerine ekle
                    bubbleContainer.appendChild(messageBubble);
                    
                    // Baloncuk konteynerini ana konteynere ekle
                    messageContainer.appendChild(bubbleContainer);

                    // Eğer 'Henüz mesaj yok' mesajı varsa kaldır
                    const noMessages = messagesDiv.querySelector('.text-gray-500.p-4');
                    if (noMessages && noMessages.textContent === 'Henüz mesaj yok.') {
                        messagesDiv.innerHTML = '';
                    }

                    // Tamamlanmış mesaj bloğunu mesajlar div'ine ekle
                    messagesDiv.appendChild(messageContainer);
                    
                    // Her zaman en alta kaydır
                    messagesDiv.scrollTop = messagesDiv.scrollHeight;
                }

                // Kişisel mesaj ekleme fonksiyonu (Gerekirse güncelleyin veya ayrı tutun)
                 function appendPersonalMessage(senderUsername, message) {
                    const messagesDiv = document.getElementById('messages'); // Kişisel sohbet mesaj div ID'si
                    if (!messagesDiv) return; // Panel açık değilse ekleme

                    const isCurrentUser = senderUsername === '@User.Identity.Name';
                    const messageDiv = document.createElement('div');
                    messageDiv.className = `flex ${isCurrentUser ? 'justify-end' : 'justify-start'} mb-4`;
                    messageDiv.innerHTML = `
                        <div class="${isCurrentUser ? 'bg-purple-500 text-white' : 'bg-white text-gray-800'} rounded-lg p-3 max-w-[70%] shadow-sm">
                            <p class="break-words">${message}</p>
                            <span class="text-xs ${isCurrentUser ? 'text-purple-100' : 'text-gray-500'} block mt-1">
                                ${new Date().toLocaleTimeString()}
                            </span>
                        </div>
                    `;
                    messagesDiv.appendChild(messageDiv);
                    messagesDiv.scrollTop = messagesDiv.scrollHeight;
                }

                // Kullanıcının katıldığı okul gruplarını sol panelde göstermek için fonksiyon
                function loadSchoolGroups() {
                    fetch('/Chat/GetUserSchoolGroups')
                        .then(response => response.json())
                        .then(groups => {
                            const schoolGroupsList = document.getElementById('schoolGroupsList');
                            schoolGroupsList.innerHTML = '';

                            if (groups && groups.length > 0) {
                                groups.forEach(group => {
                                    const groupItem = document.createElement('li');
                                    groupItem.className = 'p-3 bg-purple-50 rounded-lg hover:bg-purple-100 transition-colors cursor-pointer flex items-center gap-2';
                                    groupItem.onclick = () => loadGroupChat(group.id, group.groupName);
                                    groupItem.innerHTML = `
                                        <i class="fas fa-users text-purple-400"></i>
                                        <span>${group.groupName}</span>
                                    `;
                                    schoolGroupsList.appendChild(groupItem);
                                });
                            } else {
                                const noGroupsItem = document.createElement('li');
                                noGroupsItem.className = 'p-3 bg-purple-50 rounded-lg text-gray-500 text-center';
                                noGroupsItem.textContent = 'Henüz okul grubu bulunmuyor';
                                schoolGroupsList.appendChild(noGroupsItem);
                            }
                        })
                        .catch(error => {
                            console.error('Okul grupları yüklenirken hata oluştu:', error);
                            const schoolGroupsList = document.getElementById('schoolGroupsList');
                            schoolGroupsList.innerHTML = '<li class="p-3 bg-purple-50 rounded-lg text-red-500 text-center">Okul grupları yüklenemedi</li>';
                        });
                }

                // Sayfa yüklendiğinde okul gruplarını yükle
                loadSchoolGroups();
            });
        </script>
